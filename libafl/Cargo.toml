[package]
name = "libafl"
version.workspace = true
authors = ["Andrea Fioraldi <andreafioraldi@gmail.com>", "Dominik Maier <domenukk@gmail.com>"]
description = "Slot your own fuzzers together and extend their features using Rust"
documentation = "https://docs.rs/libafl"
repository = "https://github.com/AFLplusplus/LibAFL/"
readme = "../README.md"
license = "MIT OR Apache-2.0"
keywords = ["fuzzing", "testing", "security"]
edition = "2021"
categories = ["development-tools::testing", "emulators", "embedded", "os", "no-std"]

[features]
default = ["std", "derive", "llmp_compression", "llmp_small_maps", "llmp_broker_timeouts", "rand_trait", "fork", "prelude", "gzip", "regex", "serdeany_autoreg", "tui_monitor"]
std = ["serde_json", "serde_json/std", "nix", "serde/std", "bincode", "wait-timeout", "uuid", "backtrace", "serial_test", "libafl_bolts/std", "typed-builder"] # print, env, launcher ... support
derive = ["libafl_derive", "libafl_bolts/derive"] # provide derive(SerdeAny) macro.
fork = ["libafl_bolts/derive"] # uses the fork() syscall to spawn children, instead of launching a new command, if supported by the OS (has no effect on Windows, no_std).
rand_trait = ["libafl_bolts/rand_trait"] # If set, libafl's rand implementations will implement `rand::Rng`
introspection = [] # Include performance statistics of the fuzzing pipeline
concolic_mutation = ["z3"] # include a simple concolic mutator based on z3
python = ["pyo3", "concat-idents", "libafl_bolts/python"]
prelude = ["libafl_bolts/prelude"] # Expose libafl::prelude for access without additional using directives
tui_monitor = ["tui", "crossterm"] # enable TuiMonitor with crossterm
prometheus_monitor = ["std", "async-std", "prometheus-client", "tide", "futures"]
cli = ["libafl_bolts/cli"]  # expose libafl_bolts::cli for easy commandline parsing
qemu_cli = ["cli", "libafl_bolts/qemu_cli"] # Commandline flags for qemu-based fuzzers
frida_cli = ["cli", "libafl_bolts/frida_cli"] # Commandline flags for frida-based fuzzers
afl_exec_sec = [] # calculate exec/sec like AFL
errors_backtrace = ["libafl_bolts/errors_backtrace"]
cmin = ["z3"] # corpus minimisation
corpus_btreemap = [] # Switches from HashMap to BTreeMap for CorpusId
gzip = ["libafl_bolts/gzip"] # Enables gzip compression in certain parts of the lib
regex = ["std", "dep:regex"] # enables the NaiveTokenizer and StacktraceObserver
casr = ["libcasr", "std", "regex"] # enables deduplication based on libcasr for StacktraceObserver
tcp_manager = ["tokio", "std"] # A simple EventManager proxying everything via TCP
adaptive_serialization = []

# features hiding dependencies licensed under GPL
gpl = []
# features hiding dependencies licensed under AGPL
agpl = ["gpl", "nautilus"]
nautilus = ["grammartec", "std", "serde_json/std"]

# SerdeAny features
serdeany_autoreg = ["libafl_bolts/serdeany_autoreg"] # Automatically register all `#[derive(SerdeAny)]` types at startup.

# LLMP features
llmp_bind_public = ["libafl_bolts/llmp_bind_public"] # If set, llmp will bind to 0.0.0.0, allowing cross-device communication. Binds to localhost by default.
llmp_compression = ["libafl_bolts/llmp_compression"] # llmp compression using GZip
llmp_debug = ["libafl_bolts/llmp_debug"] # Enables debug output for LLMP
llmp_small_maps = ["libafl_bolts/llmp_small_maps"] # reduces initial map size for llmp
llmp_broker_timeouts = ["std"] # The broker loop will yield occasionally, even without status messages from client nodes

[build-dependencies]
rustversion = "1.0"

[dev-dependencies]
serde_json = { version = "1.0", default-features = false, features = ["alloc"] }
# clippy-suggested optimised byte counter
bytecount = "0.6.3"

[dependencies]
libafl_bolts = { version = "0.10.1", path = "../libafl_bolts", default-features = false, features = ["alloc"] }
libafl_derive = { version = "0.10.1", path = "../libafl_derive", optional = true }

rustversion = "1.0"
tuple_list = { version = "0.1.3" }
hashbrown =  { version = "0.14", features = ["serde", "ahash"], default-features=false } # A faster hashmap, nostd compatible
num-traits = { version = "0.2", default-features = false }
serde = { version = "1.0", default-features = false, features = ["alloc", "derive"] } # serialization lib
postcard = { version = "1.0", features = ["alloc"] } # no_std compatible serde serialization format
bincode = {version = "1.3", optional = true }
c2rust-bitfields = { version = "0.17", features = ["no_std"] }
ahash = { version = "0.8", default-features=false } # The hash function already used in hashbrown
intervaltree = { version = "0.2.7", default-features = false, features = ["serde"] }
backtrace = {version = "0.3", optional = true} # Used to get the stacktrace in StacktraceObserver
typed-builder = { version = "0.15.2", optional = true } # Implement the builder pattern at compiletime

serde_json = { version = "1.0", optional = true, default-features = false, features = ["alloc"] }
nix = { version = "0.26", optional = true }
regex = { version = "1", optional = true }
uuid = { version = "1.4", optional = true, features = ["serde", "v4"] }
libm = "0.2.2"
tui = { version = "0.19", default-features = false, features = ['crossterm'], optional = true } # Commandline rendering, for TUI Monitor
crossterm = { version = "0.25", optional = true }

prometheus-client = { version= "0.19", optional = true} # For the prometheus monitor
tide = { version = "0.16.0", optional = true }
async-std = { version = "1.12.0", features = ["attributes"], optional = true }
futures = { version = "0.3.24", optional = true }
log = "0.4.20"
tokio = { version = "1.28.1", optional = true, features = ["sync", "net", "rt", "io-util", "macros"] } # only used for TCP Event Manager right now

wait-timeout = { version = "0.2", optional = true } # used by CommandExecutor to wait for child process

z3 = { version = "0.12.0", features = ["static-link-z3"], optional = true } # for concolic mutation

pyo3 = { version = "0.18.3", optional = true, features = ["serde", "macros"] }
concat-idents = { version = "1.1.3", optional = true }

libcasr = { version = "2.7", optional = true}

# optional-dev deps (change when target.'cfg(accessible(::std))'.test-dependencies will be stable)
serial_test = { version = "2", optional = true }

# AGPL
# !!! this create requires nightly
grammartec = { version = "0.3", optional = true }

[target.'cfg(unix)'.dependencies]
libc = "0.2" # For (*nix) libc

[target.'cfg(windows)'.dependencies]
windows = { version = "0.44", features = ["Win32_Foundation", "Win32_System_Threading", "Win32_System_Diagnostics_Debug", "Win32_System_Kernel", "Win32_System_Memory", "Win32_Security", "Win32_System_SystemInformation"] }

[target.'cfg(windows)'.build-dependencies]
windows = "0.44"

#[profile.release]
#lto = true
#opt-level = 3
#debug = true
