import "../../../just/libafl-qemu.just"

FUZZER_NAME := "qemu_cmin"

CROSS_CC := env("CROSS_CC", "x86_64-linux-gnu-gcc")
CROSS_CXX := env("CROSS_CXX", "x86_64-linux-gnu-g++")
CROSS_CFLAGS := env("CROSS_CFLAGS", "")

DEFAULT_ARCH := env("LIBPNG_ARCH", "x86_64")
OPTIMIZATIONS := env("LIBPNG_OPTIMIZATIONS", "yes")

DEPS_DIR := TARGET_DIR / "deps"

HARNESS := TARGET_DIR / ("libpng-harness-" + PROFILE)

# FEATURE = "x86_64"
# LIBAFL_QEMU_CLONE_DIR = "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/qemu-libafl-bridge"

[unix]
target_dir:
    mkdir -p {{ TARGET_DIR }}

[unix]
deps_dir:
    mkdir -p {{ DEPS_DIR }}

[unix]
arch_dir arch:
    mkdir -p {{ arch }}

[unix]
zlib_wget: deps_dir
    #!/bin/bash

    wget \
        -O "{{ DEPS_DIR }}/zlib-1.2.13.tar.gz" \
        https://zlib.net/fossils/zlib-1.2.13.tar.gz

    tar \
        zxvf {{ DEPS_DIR }}/zlib-1.2.13.tar.gz \
        -C {{ DEPS_DIR }}

[unix]
zlib: zlib_wget
    #!/bin/bash

    rm -rf {{ TARGET_DIR }}/build-zlib/

    mkdir {{ TARGET_DIR }}/build-zlib/

    cd {{ TARGET_DIR }}/build-zlib/ && \
        CC={{ CROSS_CC }} \
        CFLAGS={{ CROSS_CFLAGS }} \
        {{ DEPS_DIR }}/zlib-1.2.13/configure \
            --prefix=./zlib

    make -j install

[unix]
libpng_wget: deps_dir
    wget \
        -O "{{ DEPS_DIR }}/v1.6.37.tar.gz" \
        https://github.com/glennrp/libpng/archive/refs/tags/v1.6.37.tar.gz

    tar \
        -xvf "{{ DEPS_DIR }}/v1.6.37.tar.gz" \
        -C {{ DEPS_DIR }}

[unix]
libpng arch=DEFAULT_ARCH: (arch_dir arch) zlib libpng_wget
    rm -rf {{ TARGET_DIR }}/build-png/

    mkdir {{TARGET_DIR}}/build-png/

    cd {{TARGET_DIR}}/build-png/ && \
        CC={{ CROSS_CC }} \
        CFLAGS="{{ CROSS_CXX }} -I"{{ TARGET_DIR }}/build-zlib/zlib/lib"" \
        LDFLAGS=-L"{{ TARGET_DIR }}/build-zlib/zlib/lib" \
        {{ DEPS_DIR }}/libpng-1.6.37/configure \
            --enable-shared=no \
            --with-pic=yes \
            --enable-hardware-optimizations={{OPTIMIZATIONS}} \
            --host={{ arch }} \

    make -j

[unix]
build arch=DEFAULT_ARCH:
    cargo build \
      --profile {{ PROFILE }} \
      --features {{ arch }} \
      --target-dir {{ TARGET_DIR }}

[unix]
harness arch=DEFAULT_ARCH: (libpng arch)
    {{ CROSS_CXX }} \
        ./harness.cc \
        {{ CROSS_CFLAGS }} \
        {{TARGET_DIR}}/build-png/.libs/libpng16.a" \
        "{{TARGET_DIR}}/build-zlib/libz.a" \
        -I"{{TARGET_DIR}}/build-png" \
        -I"{{TARGET_DIR}}/build-zlib/zlib/lib" \
        -L"{{TARGET_DIR}}/build-zlib/zlib/lib" \
        -o"{{ HARNESS }}" \
        -lm

[unix]
run arch=DEFAULT_ARCH: (harness arch) (build arch)
    {{ FUZZER }} \
        --input ./corpus \
        --output ${TARGET_DIR}/output/ \
        --log ${TARGET_DIR}/output/log.txt \
        --cores 0-7 \
        --asan-cores 0-3 \
        --cmplog-cores 2-5 \
        --iterations 1000000 \
        --tui \
        -- \
        {{ HARNESS }}


[unix]
test_inner arch=DEFAULT_ARCH : (run arch)
    #!/bin/bash

    export QEMU_LAUNCHER={{ FUZZER }}

    ./tests/injection/test.sh || exit 1

    # complie again with simple mgr
    cargo build --profile={{PROFILE}} --features="simplemgr" --target-dir={{ TARGET_DIR }}
    ./tests/qasan/test.sh || exit 1

[unix]
test: (test_inner "x86_64") (test_inner "arm")

single arch=DEFAULT_ARCH: (harness arch) (build arch)
    {{ FUZZER }} \
        --input ./corpus \
        --output ${TARGET_DIR}/output/ \
        --log {{ TARGET_DIR }}/output/log.txt \
        --cores 0 \
        -- \
        {{ HARNESS }}

asan arch=DEFAULT_ARCH: (harness arch) (build arch)
    {{ FUZZER }} \
        --input ./corpus \
        --output ${TARGET_DIR}/output/ \
        --log {{ TARGET_DIR }}/output/log.txt \
        --cores 0 \
        --asan-cores 0 \
        -- \
        {{ HARNESS }}

asan_guest arch=DEFAULT_ARCH: (harness arch) (build arch)
    {{ FUZZER }} \
        --input ./corpus \
        --output ${TARGET_DIR}/output/ \
        --log {{ TARGET_DIR }}/output/log.txt \
        --cores 0 \
        --asan-guest-cores 0 \
        -- \
        {{ HARNESS }}

[unix]
clean:
    cargo clean