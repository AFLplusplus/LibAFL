# Variables
[env]
FUZZER_NAME='fuzzer_dataflow'
CARGO_TARGET_DIR = { value = "target", condition = { env_not_set = ["CARGO_TARGET_DIR"] } }
FUZZER_RUNTIME = '${CARGO_TARGET_DIR}/release/libbaby_fuzzer_dataflow.a'
PROJECT_DIR = { script = ["pwd"] }

# Harness
[tasks.harness]
command = "cargo"
args = ["build" , "--release"]

# Target
[tasks.target]
command = "clang"
args = ["-c", "-gdwarf-4", "-fsanitize=dataflow", "-fsanitize-coverage=trace-pc-guard,pc-table,trace-cmp", "target.c", "-o", "target.o"]

# Link
[tasks.fuzzer]
command = "clang"
args = ["-gdwarf-4", "-fsanitize=dataflow", "-dfsan-abilist=done_abilist.txt", "target.o", "${FUZZER_RUNTIME}", "-o", "${FUZZER_NAME}"]
dependencies = [ "harness", "target" ]

# Run the fuzzer
[tasks.run]
command = "${CARGO_TARGET_DIR}/release/${FUZZER_NAME}"
dependencies = [ "fuzzer" ]

# Test
[tasks.test]
linux_alias = "test_unix"
mac_alias = "test_unix"
windows_alias = "unsupported"

[tasks.test_unix]
script_runner = "@shell"
script='''
timeout 10s ${CARGO_TARGET_DIR}/release/${FUZZER_NAME}
'''
dependencies = [ "fuzzer" ]

# Clean up
[tasks.clean]
# Disable default `clean` definition
clear = true
script_runner="@shell"
script='''
cargo clean
'''