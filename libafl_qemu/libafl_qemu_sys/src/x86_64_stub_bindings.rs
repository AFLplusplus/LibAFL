/* automatically generated by rust-bindgen 0.66.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
impl Default for __pthread_internal_list {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_mutex_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
impl Default for __pthread_mutex_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
impl Default for __pthread_cond_s__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for __pthread_cond_s__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "__pthread_cond_s__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
impl Default for __pthread_cond_s__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for __pthread_cond_s__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "__pthread_cond_s__bindgen_ty_2 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
impl Default for __pthread_cond_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for __pthread_cond_s {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "__pthread_cond_s {{ __bindgen_anon_1: {:?}, __bindgen_anon_2: {:?}, __g_refs: {:?}, __g_size: {:?}, __g1_orig_size: {:?}, __wrefs: {:?}, __g_signals: {:?} }}" , self . __bindgen_anon_1 , self . __bindgen_anon_2 , self . __g_refs , self . __g_size , self . __g1_orig_size , self . __wrefs , self . __g_signals)
    }
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_mutex_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for pthread_mutex_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_mutex_t {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_cond_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for pthread_cond_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_cond_t {{ union }}")
    }
}
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
impl Default for _IO_FILE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[test]
fn bindgen_test_layout___jmp_buf_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__jmp_buf_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__jmp_buf_tag>(),
        200usize,
        concat!("Size of: ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__jmp_buf_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__jmpbuf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__jmpbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mask_was_saved) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__mask_was_saved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__saved_mask) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__saved_mask)
        )
    );
}
pub type sigjmp_buf = [__jmp_buf_tag; 1usize];
pub type guint8 = ::std::os::raw::c_uchar;
pub type gchar = ::std::os::raw::c_char;
pub type guint = ::std::os::raw::c_uint;
pub type gpointer = *mut ::std::os::raw::c_void;
pub type GArray = _GArray;
pub type GByteArray = _GByteArray;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GArray {
    pub data: *mut gchar,
    pub len: guint,
}
#[test]
fn bindgen_test_layout__GArray() {
    const UNINIT: ::std::mem::MaybeUninit<_GArray> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_GArray>(),
        16usize,
        concat!("Size of: ", stringify!(_GArray))
    );
    assert_eq!(
        ::std::mem::align_of::<_GArray>(),
        8usize,
        concat!("Alignment of ", stringify!(_GArray))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GArray),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GArray),
            "::",
            stringify!(len)
        )
    );
}
impl Default for _GArray {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GByteArray {
    pub data: *mut guint8,
    pub len: guint,
}
#[test]
fn bindgen_test_layout__GByteArray() {
    const UNINIT: ::std::mem::MaybeUninit<_GByteArray> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_GByteArray>(),
        16usize,
        concat!("Size of: ", stringify!(_GByteArray))
    );
    assert_eq!(
        ::std::mem::align_of::<_GByteArray>(),
        8usize,
        concat!("Alignment of ", stringify!(_GByteArray))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GByteArray),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GByteArray),
            "::",
            stringify!(len)
        )
    );
}
impl Default for _GByteArray {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GHashTable {
    _unused: [u8; 0],
}
pub type GHashTable = _GHashTable;
pub type GSList = _GSList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSList {
    pub data: gpointer,
    pub next: *mut GSList,
}
#[test]
fn bindgen_test_layout__GSList() {
    const UNINIT: ::std::mem::MaybeUninit<_GSList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_GSList>(),
        16usize,
        concat!("Size of: ", stringify!(_GSList))
    );
    assert_eq!(
        ::std::mem::align_of::<_GSList>(),
        8usize,
        concat!("Alignment of ", stringify!(_GSList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GSList),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GSList),
            "::",
            stringify!(next)
        )
    );
}
impl Default for _GSList {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPUAddressSpace {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CpuInfoFast {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPUJumpCache {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DumpState {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Error {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSONWriter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemoryMappingList {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QDict {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QEMUFile {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QObject {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RAMBlock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Visitor {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRQState {
    _unused: [u8; 0],
}
pub type qemu_irq = *mut IRQState;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QEnumLookup {
    pub array: *const *const ::std::os::raw::c_char,
    pub special_features: *const ::std::os::raw::c_uchar,
    pub size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_QEnumLookup() {
    const UNINIT: ::std::mem::MaybeUninit<QEnumLookup> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<QEnumLookup>(),
        24usize,
        concat!("Size of: ", stringify!(QEnumLookup))
    );
    assert_eq!(
        ::std::mem::align_of::<QEnumLookup>(),
        8usize,
        concat!("Alignment of ", stringify!(QEnumLookup))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(QEnumLookup),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).special_features) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(QEnumLookup),
            "::",
            stringify!(special_features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(QEnumLookup),
            "::",
            stringify!(size)
        )
    );
}
impl Default for QEnumLookup {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type Int128 = __int128_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct QemuMutex {
    pub lock: pthread_mutex_t,
    pub initialized: bool,
}
#[test]
fn bindgen_test_layout_QemuMutex() {
    const UNINIT: ::std::mem::MaybeUninit<QemuMutex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<QemuMutex>(),
        48usize,
        concat!("Size of: ", stringify!(QemuMutex))
    );
    assert_eq!(
        ::std::mem::align_of::<QemuMutex>(),
        8usize,
        concat!("Alignment of ", stringify!(QemuMutex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(QemuMutex),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialized) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(QemuMutex),
            "::",
            stringify!(initialized)
        )
    );
}
impl Default for QemuMutex {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for QemuMutex {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "QemuMutex {{ lock: {:?}, initialized: {:?} }}",
            self.lock, self.initialized
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct QemuCond {
    pub cond: pthread_cond_t,
    pub initialized: bool,
}
#[test]
fn bindgen_test_layout_QemuCond() {
    const UNINIT: ::std::mem::MaybeUninit<QemuCond> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<QemuCond>(),
        56usize,
        concat!("Size of: ", stringify!(QemuCond))
    );
    assert_eq!(
        ::std::mem::align_of::<QemuCond>(),
        8usize,
        concat!("Alignment of ", stringify!(QemuCond))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cond) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(QemuCond),
            "::",
            stringify!(cond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialized) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(QemuCond),
            "::",
            stringify!(initialized)
        )
    );
}
impl Default for QemuCond {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for QemuCond {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "QemuCond {{ cond: {:?}, initialized: {:?} }}",
            self.cond, self.initialized
        )
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct QemuThread {
    pub thread: pthread_t,
}
#[test]
fn bindgen_test_layout_QemuThread() {
    const UNINIT: ::std::mem::MaybeUninit<QemuThread> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<QemuThread>(),
        8usize,
        concat!("Size of: ", stringify!(QemuThread))
    );
    assert_eq!(
        ::std::mem::align_of::<QemuThread>(),
        8usize,
        concat!("Alignment of ", stringify!(QemuThread))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(QemuThread),
            "::",
            stringify!(thread)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct QemuLockCnt {
    pub count: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_QemuLockCnt() {
    const UNINIT: ::std::mem::MaybeUninit<QemuLockCnt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<QemuLockCnt>(),
        4usize,
        concat!("Size of: ", stringify!(QemuLockCnt))
    );
    assert_eq!(
        ::std::mem::align_of::<QemuLockCnt>(),
        4usize,
        concat!("Alignment of ", stringify!(QemuLockCnt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(QemuLockCnt),
            "::",
            stringify!(count)
        )
    );
}
pub type hwaddr = u64;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct MemTxAttrs {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
}
#[test]
fn bindgen_test_layout_MemTxAttrs() {
    assert_eq!(
        ::std::mem::size_of::<MemTxAttrs>(),
        4usize,
        concat!("Size of: ", stringify!(MemTxAttrs))
    );
    assert_eq!(
        ::std::mem::align_of::<MemTxAttrs>(),
        4usize,
        concat!("Alignment of ", stringify!(MemTxAttrs))
    );
}
impl MemTxAttrs {
    #[inline]
    pub fn unspecified(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_unspecified(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn secure(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_secure(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn user(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_user(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn memory(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_memory(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn requester_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_requester_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn byte_swap(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_byte_swap(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn target_tlb_bit0(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_target_tlb_bit0(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn target_tlb_bit1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_target_tlb_bit1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn target_tlb_bit2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_target_tlb_bit2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        unspecified: ::std::os::raw::c_uint,
        secure: ::std::os::raw::c_uint,
        user: ::std::os::raw::c_uint,
        memory: ::std::os::raw::c_uint,
        requester_id: ::std::os::raw::c_uint,
        byte_swap: ::std::os::raw::c_uint,
        target_tlb_bit0: ::std::os::raw::c_uint,
        target_tlb_bit1: ::std::os::raw::c_uint,
        target_tlb_bit2: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let unspecified: u32 = unsafe { ::std::mem::transmute(unspecified) };
            unspecified as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let secure: u32 = unsafe { ::std::mem::transmute(secure) };
            secure as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let user: u32 = unsafe { ::std::mem::transmute(user) };
            user as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let memory: u32 = unsafe { ::std::mem::transmute(memory) };
            memory as u64
        });
        __bindgen_bitfield_unit.set(4usize, 16u8, {
            let requester_id: u32 = unsafe { ::std::mem::transmute(requester_id) };
            requester_id as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let byte_swap: u32 = unsafe { ::std::mem::transmute(byte_swap) };
            byte_swap as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let target_tlb_bit0: u32 = unsafe { ::std::mem::transmute(target_tlb_bit0) };
            target_tlb_bit0 as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let target_tlb_bit1: u32 = unsafe { ::std::mem::transmute(target_tlb_bit1) };
            target_tlb_bit1 as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let target_tlb_bit2: u32 = unsafe { ::std::mem::transmute(target_tlb_bit2) };
            target_tlb_bit2 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type MemTxResult = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QTailQLink {
    pub tql_next: *mut ::std::os::raw::c_void,
    pub tql_prev: *mut QTailQLink,
}
#[test]
fn bindgen_test_layout_QTailQLink() {
    const UNINIT: ::std::mem::MaybeUninit<QTailQLink> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<QTailQLink>(),
        16usize,
        concat!("Size of: ", stringify!(QTailQLink))
    );
    assert_eq!(
        ::std::mem::align_of::<QTailQLink>(),
        8usize,
        concat!("Alignment of ", stringify!(QTailQLink))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tql_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(QTailQLink),
            "::",
            stringify!(tql_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tql_prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(QTailQLink),
            "::",
            stringify!(tql_prev)
        )
    );
}
impl Default for QTailQLink {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type RCUCBFunc = ::std::option::Option<unsafe extern "C" fn(head: *mut rcu_head)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcu_head {
    pub next: *mut rcu_head,
    pub func: RCUCBFunc,
}
#[test]
fn bindgen_test_layout_rcu_head() {
    const UNINIT: ::std::mem::MaybeUninit<rcu_head> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcu_head>(),
        16usize,
        concat!("Size of: ", stringify!(rcu_head))
    );
    assert_eq!(
        ::std::mem::align_of::<rcu_head>(),
        8usize,
        concat!("Alignment of ", stringify!(rcu_head))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcu_head),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcu_head),
            "::",
            stringify!(func)
        )
    );
}
impl Default for rcu_head {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TypeImpl {
    _unused: [u8; 0],
}
pub type Type = *mut TypeImpl;
#[doc = " typedef ObjectPropertyAccessor:\n @obj: the object that owns the property\n @v: the visitor that contains the property data\n @name: the name of the property\n @opaque: the object property opaque\n @errp: a pointer to an Error that is filled if getting/setting fails.\n\n Called when trying to get/set a property."]
pub type ObjectPropertyAccessor = ::std::option::Option<
    unsafe extern "C" fn(
        obj: *mut Object,
        v: *mut Visitor,
        name: *const ::std::os::raw::c_char,
        opaque: *mut ::std::os::raw::c_void,
        errp: *mut *mut Error,
    ),
>;
#[doc = " typedef ObjectPropertyResolve:\n @obj: the object that owns the property\n @opaque: the opaque registered with the property\n @part: the name of the property\n\n Resolves the #Object corresponding to property @part.\n\n The returned object can also be used as a starting point\n to resolve a relative path starting with \"@part\".\n\n Returns: If @path is the path that led to @obj, the function\n returns the #Object corresponding to \"@path/@part\".\n If \"@path/@part\" is not a valid object path, it returns #NULL."]
pub type ObjectPropertyResolve = ::std::option::Option<
    unsafe extern "C" fn(
        obj: *mut Object,
        opaque: *mut ::std::os::raw::c_void,
        part: *const ::std::os::raw::c_char,
    ) -> *mut Object,
>;
#[doc = " typedef ObjectPropertyRelease:\n @obj: the object that owns the property\n @name: the name of the property\n @opaque: the opaque registered with the property\n\n Called when a property is removed from a object."]
pub type ObjectPropertyRelease = ::std::option::Option<
    unsafe extern "C" fn(
        obj: *mut Object,
        name: *const ::std::os::raw::c_char,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
#[doc = " typedef ObjectPropertyInit:\n @obj: the object that owns the property\n @prop: the property to set\n\n Called when a property is initialized."]
pub type ObjectPropertyInit =
    ::std::option::Option<unsafe extern "C" fn(obj: *mut Object, prop: *mut ObjectProperty)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ObjectProperty {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: *mut ::std::os::raw::c_char,
    pub description: *mut ::std::os::raw::c_char,
    pub get: ObjectPropertyAccessor,
    pub set: ObjectPropertyAccessor,
    pub resolve: ObjectPropertyResolve,
    pub release: ObjectPropertyRelease,
    pub init: ObjectPropertyInit,
    pub opaque: *mut ::std::os::raw::c_void,
    pub defval: *mut QObject,
}
#[test]
fn bindgen_test_layout_ObjectProperty() {
    const UNINIT: ::std::mem::MaybeUninit<ObjectProperty> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ObjectProperty>(),
        80usize,
        concat!("Size of: ", stringify!(ObjectProperty))
    );
    assert_eq!(
        ::std::mem::align_of::<ObjectProperty>(),
        8usize,
        concat!("Alignment of ", stringify!(ObjectProperty))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectProperty),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectProperty),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectProperty),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectProperty),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectProperty),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolve) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectProperty),
            "::",
            stringify!(resolve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectProperty),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectProperty),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectProperty),
            "::",
            stringify!(opaque)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defval) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectProperty),
            "::",
            stringify!(defval)
        )
    );
}
impl Default for ObjectProperty {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " typedef ObjectUnparent:\n @obj: the object that is being removed from the composition tree\n\n Called when an object is being removed from the QOM composition tree.\n The function should remove any backlinks from children objects to @obj."]
pub type ObjectUnparent = ::std::option::Option<unsafe extern "C" fn(obj: *mut Object)>;
#[doc = " typedef ObjectFree:\n @obj: the object being freed\n\n Called when an object's last reference is removed."]
pub type ObjectFree = ::std::option::Option<unsafe extern "C" fn(obj: *mut ::std::os::raw::c_void)>;
#[doc = " struct ObjectClass:\n\n The base for all classes.  The only thing that #ObjectClass contains is an\n integer type handle."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ObjectClass {
    pub type_: Type,
    pub interfaces: *mut GSList,
    pub object_cast_cache: [*const ::std::os::raw::c_char; 4usize],
    pub class_cast_cache: [*const ::std::os::raw::c_char; 4usize],
    pub unparent: ObjectUnparent,
    pub properties: *mut GHashTable,
}
#[test]
fn bindgen_test_layout_ObjectClass() {
    const UNINIT: ::std::mem::MaybeUninit<ObjectClass> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ObjectClass>(),
        96usize,
        concat!("Size of: ", stringify!(ObjectClass))
    );
    assert_eq!(
        ::std::mem::align_of::<ObjectClass>(),
        8usize,
        concat!("Alignment of ", stringify!(ObjectClass))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectClass),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interfaces) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectClass),
            "::",
            stringify!(interfaces)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_cast_cache) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectClass),
            "::",
            stringify!(object_cast_cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_cast_cache) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectClass),
            "::",
            stringify!(class_cast_cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unparent) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectClass),
            "::",
            stringify!(unparent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).properties) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectClass),
            "::",
            stringify!(properties)
        )
    );
}
impl Default for ObjectClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " struct Object:\n\n The base for all objects.  The first member of this object is a pointer to\n a #ObjectClass.  Since C guarantees that the first member of a structure\n always begins at byte 0 of that structure, as long as any sub-object places\n its parent as the first member, we can cast directly to a #Object.\n\n As a result, #Object contains a reference to the objects type as its\n first member.  This allows identification of the real type of the object at\n run time."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Object {
    pub class: *mut ObjectClass,
    pub free: ObjectFree,
    pub properties: *mut GHashTable,
    pub ref_: u32,
    pub parent: *mut Object,
}
#[test]
fn bindgen_test_layout_Object() {
    const UNINIT: ::std::mem::MaybeUninit<Object> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Object>(),
        40usize,
        concat!("Size of: ", stringify!(Object))
    );
    assert_eq!(
        ::std::mem::align_of::<Object>(),
        8usize,
        concat!("Alignment of ", stringify!(Object))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Object),
            "::",
            stringify!(class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Object),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).properties) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Object),
            "::",
            stringify!(properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Object),
            "::",
            stringify!(ref_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Object),
            "::",
            stringify!(parent)
        )
    );
}
impl Default for Object {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HotplugHandler {
    _unused: [u8; 0],
}
#[doc = " ResettableState:\n Structure holding reset related state. The fields should not be accessed\n directly; the definition is here to allow further inclusion into other\n objects.\n\n @count: Number of reset level the object is into. It is incremented when\n the reset operation starts and decremented when it finishes.\n @hold_phase_pending: flag which indicates that we need to invoke the 'hold'\n phase handler for this object.\n @exit_phase_in_progress: true if we are currently in the exit phase"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ResettableState {
    pub count: ::std::os::raw::c_uint,
    pub hold_phase_pending: bool,
    pub exit_phase_in_progress: bool,
}
#[test]
fn bindgen_test_layout_ResettableState() {
    const UNINIT: ::std::mem::MaybeUninit<ResettableState> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ResettableState>(),
        8usize,
        concat!("Size of: ", stringify!(ResettableState))
    );
    assert_eq!(
        ::std::mem::align_of::<ResettableState>(),
        4usize,
        concat!("Alignment of ", stringify!(ResettableState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ResettableState),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hold_phase_pending) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ResettableState),
            "::",
            stringify!(hold_phase_pending)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exit_phase_in_progress) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ResettableState),
            "::",
            stringify!(exit_phase_in_progress)
        )
    );
}
pub type DeviceRealize =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut DeviceState, errp: *mut *mut Error)>;
pub type DeviceUnrealize = ::std::option::Option<unsafe extern "C" fn(dev: *mut DeviceState)>;
pub type DeviceReset = ::std::option::Option<unsafe extern "C" fn(dev: *mut DeviceState)>;
#[doc = " DeviceClass:\n @props: Properties accessing state fields.\n @realize: Callback function invoked when the #DeviceState:realized\n property is changed to %true.\n @unrealize: Callback function invoked when the #DeviceState:realized\n property is changed to %false.\n @hotpluggable: indicates if #DeviceClass is hotpluggable, available\n as readonly \"hotpluggable\" property of #DeviceState instance\n\n # Realization #\n Devices are constructed in two stages,\n 1) object instantiation via object_initialize() and\n 2) device realization via #DeviceState:realized property.\n The former may not fail (and must not abort or exit, since it is called\n during device introspection already), and the latter may return error\n information to the caller and must be re-entrant.\n Trivial field initializations should go into #TypeInfo.instance_init.\n Operations depending on @props static properties should go into @realize.\n After successful realization, setting static properties will fail.\n\n As an interim step, the #DeviceState:realized property can also be\n set with qdev_realize().\n In the future, devices will propagate this state change to their children\n and along busses they expose.\n The point in time will be deferred to machine creation, so that values\n set in @realize will not be introspectable beforehand. Therefore devices\n must not create children during @realize; they should initialize them via\n object_initialize() in their own #TypeInfo.instance_init and forward the\n realization events appropriately.\n\n Any type may override the @realize and/or @unrealize callbacks but needs\n to call the parent type's implementation if keeping their functionality\n is desired. Refer to QOM documentation for further discussion and examples.\n\n <note>\n   <para>\n Since TYPE_DEVICE doesn't implement @realize and @unrealize, types\n derived directly from it need not call their parent's @realize and\n @unrealize.\n For other types consult the documentation and implementation of the\n respective parent types.\n   </para>\n </note>\n\n # Hiding a device #\n To hide a device, a DeviceListener function hide_device() needs to\n be registered.\n It can be used to defer adding a device and therefore hide it from\n the guest. The handler registering to this DeviceListener can save\n the QOpts passed to it for re-using it later. It must return if it\n wants the device to be hidden or visible. When the handler function\n decides the device shall be visible it will be added with\n qdev_device_add() and realized as any other device. Otherwise\n qdev_device_add() will return early without adding the device. The\n guest will not see a \"hidden\" device until it was marked visible\n and qdev_device_add called again.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceClass {
    pub parent_class: ObjectClass,
    pub categories: [::std::os::raw::c_ulong; 1usize],
    pub fw_name: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
    pub props_: *mut Property,
    pub user_creatable: bool,
    pub hotpluggable: bool,
    pub reset: DeviceReset,
    pub realize: DeviceRealize,
    pub unrealize: DeviceUnrealize,
    pub vmsd: *const VMStateDescription,
    pub bus_type: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_DeviceClass() {
    const UNINIT: ::std::mem::MaybeUninit<DeviceClass> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DeviceClass>(),
        176usize,
        concat!("Size of: ", stringify!(DeviceClass))
    );
    assert_eq!(
        ::std::mem::align_of::<DeviceClass>(),
        8usize,
        concat!("Alignment of ", stringify!(DeviceClass))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent_class) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceClass),
            "::",
            stringify!(parent_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).categories) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceClass),
            "::",
            stringify!(categories)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fw_name) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceClass),
            "::",
            stringify!(fw_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceClass),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).props_) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceClass),
            "::",
            stringify!(props_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_creatable) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceClass),
            "::",
            stringify!(user_creatable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hotpluggable) as usize - ptr as usize },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceClass),
            "::",
            stringify!(hotpluggable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reset) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceClass),
            "::",
            stringify!(reset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).realize) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceClass),
            "::",
            stringify!(realize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unrealize) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceClass),
            "::",
            stringify!(unrealize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vmsd) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceClass),
            "::",
            stringify!(vmsd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bus_type) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceClass),
            "::",
            stringify!(bus_type)
        )
    );
}
impl Default for DeviceClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NamedGPIOList {
    pub name: *mut ::std::os::raw::c_char,
    pub in_: *mut qemu_irq,
    pub num_in: ::std::os::raw::c_int,
    pub num_out: ::std::os::raw::c_int,
    pub node: NamedGPIOList__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NamedGPIOList__bindgen_ty_1 {
    pub le_next: *mut NamedGPIOList,
    pub le_prev: *mut *mut NamedGPIOList,
}
#[test]
fn bindgen_test_layout_NamedGPIOList__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<NamedGPIOList__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NamedGPIOList__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(NamedGPIOList__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<NamedGPIOList__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(NamedGPIOList__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).le_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedGPIOList__bindgen_ty_1),
            "::",
            stringify!(le_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).le_prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedGPIOList__bindgen_ty_1),
            "::",
            stringify!(le_prev)
        )
    );
}
impl Default for NamedGPIOList__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_NamedGPIOList() {
    const UNINIT: ::std::mem::MaybeUninit<NamedGPIOList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NamedGPIOList>(),
        40usize,
        concat!("Size of: ", stringify!(NamedGPIOList))
    );
    assert_eq!(
        ::std::mem::align_of::<NamedGPIOList>(),
        8usize,
        concat!("Alignment of ", stringify!(NamedGPIOList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedGPIOList),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedGPIOList),
            "::",
            stringify!(in_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_in) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedGPIOList),
            "::",
            stringify!(num_in)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_out) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedGPIOList),
            "::",
            stringify!(num_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedGPIOList),
            "::",
            stringify!(node)
        )
    );
}
impl Default for NamedGPIOList {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NamedClockList {
    pub name: *mut ::std::os::raw::c_char,
    pub clock: *mut Clock,
    pub output: bool,
    pub alias: bool,
    pub node: NamedClockList__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NamedClockList__bindgen_ty_1 {
    pub le_next: *mut NamedClockList,
    pub le_prev: *mut *mut NamedClockList,
}
#[test]
fn bindgen_test_layout_NamedClockList__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<NamedClockList__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NamedClockList__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(NamedClockList__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<NamedClockList__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(NamedClockList__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).le_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedClockList__bindgen_ty_1),
            "::",
            stringify!(le_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).le_prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedClockList__bindgen_ty_1),
            "::",
            stringify!(le_prev)
        )
    );
}
impl Default for NamedClockList__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_NamedClockList() {
    const UNINIT: ::std::mem::MaybeUninit<NamedClockList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NamedClockList>(),
        40usize,
        concat!("Size of: ", stringify!(NamedClockList))
    );
    assert_eq!(
        ::std::mem::align_of::<NamedClockList>(),
        8usize,
        concat!("Alignment of ", stringify!(NamedClockList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedClockList),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clock) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedClockList),
            "::",
            stringify!(clock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedClockList),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alias) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedClockList),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedClockList),
            "::",
            stringify!(node)
        )
    );
}
impl Default for NamedClockList {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct MemReentrancyGuard {
    pub engaged_in_io: bool,
}
#[test]
fn bindgen_test_layout_MemReentrancyGuard() {
    const UNINIT: ::std::mem::MaybeUninit<MemReentrancyGuard> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MemReentrancyGuard>(),
        1usize,
        concat!("Size of: ", stringify!(MemReentrancyGuard))
    );
    assert_eq!(
        ::std::mem::align_of::<MemReentrancyGuard>(),
        1usize,
        concat!("Alignment of ", stringify!(MemReentrancyGuard))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).engaged_in_io) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MemReentrancyGuard),
            "::",
            stringify!(engaged_in_io)
        )
    );
}
#[doc = " DeviceState:\n @reset: ResettableState for the device; handled by Resettable interface.\n\n This structure should not be accessed directly.  We declare it here\n so that it can be embedded in individual device state structures."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceState {
    pub parent_obj: Object,
    pub id: *mut ::std::os::raw::c_char,
    pub canonical_path: *mut ::std::os::raw::c_char,
    pub realized: bool,
    pub pending_deleted_event: bool,
    pub pending_deleted_expires_ms: i64,
    pub opts: *mut QDict,
    pub hotplugged: ::std::os::raw::c_int,
    pub allow_unplug_during_migration: bool,
    pub parent_bus: *mut BusState,
    pub gpios: DeviceState__bindgen_ty_1,
    pub clocks: DeviceState__bindgen_ty_2,
    pub child_bus: DeviceState__bindgen_ty_3,
    pub num_child_bus: ::std::os::raw::c_int,
    pub instance_id_alias: ::std::os::raw::c_int,
    pub alias_required_for_version: ::std::os::raw::c_int,
    pub reset: ResettableState,
    pub unplug_blockers: *mut GSList,
    pub mem_reentrancy_guard: MemReentrancyGuard,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceState__bindgen_ty_1 {
    pub lh_first: *mut NamedGPIOList,
}
#[test]
fn bindgen_test_layout_DeviceState__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<DeviceState__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DeviceState__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(DeviceState__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<DeviceState__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(DeviceState__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lh_first) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceState__bindgen_ty_1),
            "::",
            stringify!(lh_first)
        )
    );
}
impl Default for DeviceState__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceState__bindgen_ty_2 {
    pub lh_first: *mut NamedClockList,
}
#[test]
fn bindgen_test_layout_DeviceState__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<DeviceState__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DeviceState__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(DeviceState__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<DeviceState__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(DeviceState__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lh_first) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceState__bindgen_ty_2),
            "::",
            stringify!(lh_first)
        )
    );
}
impl Default for DeviceState__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceState__bindgen_ty_3 {
    pub lh_first: *mut BusState,
}
#[test]
fn bindgen_test_layout_DeviceState__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<DeviceState__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DeviceState__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(DeviceState__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<DeviceState__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(DeviceState__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lh_first) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceState__bindgen_ty_3),
            "::",
            stringify!(lh_first)
        )
    );
}
impl Default for DeviceState__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_DeviceState() {
    const UNINIT: ::std::mem::MaybeUninit<DeviceState> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DeviceState>(),
        160usize,
        concat!("Size of: ", stringify!(DeviceState))
    );
    assert_eq!(
        ::std::mem::align_of::<DeviceState>(),
        8usize,
        concat!("Alignment of ", stringify!(DeviceState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent_obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceState),
            "::",
            stringify!(parent_obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceState),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).canonical_path) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceState),
            "::",
            stringify!(canonical_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).realized) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceState),
            "::",
            stringify!(realized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pending_deleted_event) as usize - ptr as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceState),
            "::",
            stringify!(pending_deleted_event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pending_deleted_expires_ms) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceState),
            "::",
            stringify!(pending_deleted_expires_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opts) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceState),
            "::",
            stringify!(opts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hotplugged) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceState),
            "::",
            stringify!(hotplugged)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).allow_unplug_during_migration) as usize - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceState),
            "::",
            stringify!(allow_unplug_during_migration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent_bus) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceState),
            "::",
            stringify!(parent_bus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gpios) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceState),
            "::",
            stringify!(gpios)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clocks) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceState),
            "::",
            stringify!(clocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).child_bus) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceState),
            "::",
            stringify!(child_bus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_child_bus) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceState),
            "::",
            stringify!(num_child_bus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instance_id_alias) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceState),
            "::",
            stringify!(instance_id_alias)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alias_required_for_version) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceState),
            "::",
            stringify!(alias_required_for_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reset) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceState),
            "::",
            stringify!(reset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unplug_blockers) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceState),
            "::",
            stringify!(unplug_blockers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_reentrancy_guard) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceState),
            "::",
            stringify!(mem_reentrancy_guard)
        )
    );
}
impl Default for DeviceState {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BusChild {
    pub rcu: rcu_head,
    pub child: *mut DeviceState,
    pub index: ::std::os::raw::c_int,
    pub sibling: BusChild__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union BusChild__bindgen_ty_1 {
    pub tqe_next: *mut BusChild,
    pub tqe_circ: QTailQLink,
}
#[test]
fn bindgen_test_layout_BusChild__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<BusChild__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BusChild__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(BusChild__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<BusChild__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(BusChild__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqe_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BusChild__bindgen_ty_1),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqe_circ) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BusChild__bindgen_ty_1),
            "::",
            stringify!(tqe_circ)
        )
    );
}
impl Default for BusChild__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for BusChild__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "BusChild__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_BusChild() {
    const UNINIT: ::std::mem::MaybeUninit<BusChild> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BusChild>(),
        48usize,
        concat!("Size of: ", stringify!(BusChild))
    );
    assert_eq!(
        ::std::mem::align_of::<BusChild>(),
        8usize,
        concat!("Alignment of ", stringify!(BusChild))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rcu) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BusChild),
            "::",
            stringify!(rcu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).child) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BusChild),
            "::",
            stringify!(child)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BusChild),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sibling) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BusChild),
            "::",
            stringify!(sibling)
        )
    );
}
impl Default for BusChild {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for BusChild {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "BusChild {{ rcu: {:?}, child: {:?}, index: {:?}, sibling: {:?} }}",
            self.rcu, self.child, self.index, self.sibling
        )
    }
}
#[doc = " BusState:\n @hotplug_handler: link to a hotplug handler associated with bus.\n @reset: ResettableState for the bus; handled by Resettable interface."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BusState {
    pub obj: Object,
    pub parent: *mut DeviceState,
    pub name: *mut ::std::os::raw::c_char,
    pub hotplug_handler: *mut HotplugHandler,
    pub max_index: ::std::os::raw::c_int,
    pub realized: bool,
    pub full: bool,
    pub num_children: ::std::os::raw::c_int,
    pub children: BusState__bindgen_ty_1,
    pub sibling: BusState__bindgen_ty_2,
    pub reset: ResettableState,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union BusState__bindgen_ty_1 {
    pub tqh_first: *mut BusChild,
    pub tqh_circ: QTailQLink,
}
#[test]
fn bindgen_test_layout_BusState__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<BusState__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BusState__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(BusState__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<BusState__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(BusState__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqh_first) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BusState__bindgen_ty_1),
            "::",
            stringify!(tqh_first)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqh_circ) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BusState__bindgen_ty_1),
            "::",
            stringify!(tqh_circ)
        )
    );
}
impl Default for BusState__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for BusState__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "BusState__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BusState__bindgen_ty_2 {
    pub le_next: *mut BusState,
    pub le_prev: *mut *mut BusState,
}
#[test]
fn bindgen_test_layout_BusState__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<BusState__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BusState__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(BusState__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<BusState__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(BusState__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).le_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BusState__bindgen_ty_2),
            "::",
            stringify!(le_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).le_prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BusState__bindgen_ty_2),
            "::",
            stringify!(le_prev)
        )
    );
}
impl Default for BusState__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_BusState() {
    const UNINIT: ::std::mem::MaybeUninit<BusState> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BusState>(),
        120usize,
        concat!("Size of: ", stringify!(BusState))
    );
    assert_eq!(
        ::std::mem::align_of::<BusState>(),
        8usize,
        concat!("Alignment of ", stringify!(BusState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BusState),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BusState),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BusState),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hotplug_handler) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BusState),
            "::",
            stringify!(hotplug_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_index) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BusState),
            "::",
            stringify!(max_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).realized) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(BusState),
            "::",
            stringify!(realized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full) as usize - ptr as usize },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(BusState),
            "::",
            stringify!(full)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_children) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BusState),
            "::",
            stringify!(num_children)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).children) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BusState),
            "::",
            stringify!(children)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sibling) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(BusState),
            "::",
            stringify!(sibling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reset) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(BusState),
            "::",
            stringify!(reset)
        )
    );
}
impl Default for BusState {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for BusState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "BusState {{ obj: {:?}, parent: {:?}, name: {:?}, hotplug_handler: {:?}, max_index: {:?}, realized: {:?}, full: {:?}, num_children: {:?}, children: {:?}, sibling: {:?}, reset: {:?} }}" , self . obj , self . parent , self . name , self . hotplug_handler , self . max_index , self . realized , self . full , self . num_children , self . children , self . sibling , self . reset)
    }
}
pub type PTR = *mut ::std::os::raw::c_void;
pub type bfd_vma = u64;
pub type bfd_byte = u8;
pub const bfd_flavour_bfd_target_unknown_flavour: bfd_flavour = bfd_flavour(0);
pub const bfd_flavour_bfd_target_aout_flavour: bfd_flavour = bfd_flavour(1);
pub const bfd_flavour_bfd_target_coff_flavour: bfd_flavour = bfd_flavour(2);
pub const bfd_flavour_bfd_target_ecoff_flavour: bfd_flavour = bfd_flavour(3);
pub const bfd_flavour_bfd_target_elf_flavour: bfd_flavour = bfd_flavour(4);
pub const bfd_flavour_bfd_target_ieee_flavour: bfd_flavour = bfd_flavour(5);
pub const bfd_flavour_bfd_target_nlm_flavour: bfd_flavour = bfd_flavour(6);
pub const bfd_flavour_bfd_target_oasys_flavour: bfd_flavour = bfd_flavour(7);
pub const bfd_flavour_bfd_target_tekhex_flavour: bfd_flavour = bfd_flavour(8);
pub const bfd_flavour_bfd_target_srec_flavour: bfd_flavour = bfd_flavour(9);
pub const bfd_flavour_bfd_target_ihex_flavour: bfd_flavour = bfd_flavour(10);
pub const bfd_flavour_bfd_target_som_flavour: bfd_flavour = bfd_flavour(11);
pub const bfd_flavour_bfd_target_os9k_flavour: bfd_flavour = bfd_flavour(12);
pub const bfd_flavour_bfd_target_versados_flavour: bfd_flavour = bfd_flavour(13);
pub const bfd_flavour_bfd_target_msdos_flavour: bfd_flavour = bfd_flavour(14);
pub const bfd_flavour_bfd_target_evax_flavour: bfd_flavour = bfd_flavour(15);
impl ::std::ops::BitOr<bfd_flavour> for bfd_flavour {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        bfd_flavour(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for bfd_flavour {
    #[inline]
    fn bitor_assign(&mut self, rhs: bfd_flavour) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<bfd_flavour> for bfd_flavour {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        bfd_flavour(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for bfd_flavour {
    #[inline]
    fn bitand_assign(&mut self, rhs: bfd_flavour) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct bfd_flavour(pub ::std::os::raw::c_uint);
pub const bfd_endian_BFD_ENDIAN_BIG: bfd_endian = bfd_endian(0);
pub const bfd_endian_BFD_ENDIAN_LITTLE: bfd_endian = bfd_endian(1);
pub const bfd_endian_BFD_ENDIAN_UNKNOWN: bfd_endian = bfd_endian(2);
impl ::std::ops::BitOr<bfd_endian> for bfd_endian {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        bfd_endian(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for bfd_endian {
    #[inline]
    fn bitor_assign(&mut self, rhs: bfd_endian) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<bfd_endian> for bfd_endian {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        bfd_endian(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for bfd_endian {
    #[inline]
    fn bitand_assign(&mut self, rhs: bfd_endian) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct bfd_endian(pub ::std::os::raw::c_uint);
pub const bfd_architecture_bfd_arch_unknown: bfd_architecture = bfd_architecture(0);
pub const bfd_architecture_bfd_arch_obscure: bfd_architecture = bfd_architecture(1);
pub const bfd_architecture_bfd_arch_m68k: bfd_architecture = bfd_architecture(2);
pub const bfd_architecture_bfd_arch_vax: bfd_architecture = bfd_architecture(3);
pub const bfd_architecture_bfd_arch_i960: bfd_architecture = bfd_architecture(4);
pub const bfd_architecture_bfd_arch_a29k: bfd_architecture = bfd_architecture(5);
pub const bfd_architecture_bfd_arch_sparc: bfd_architecture = bfd_architecture(6);
pub const bfd_architecture_bfd_arch_mips: bfd_architecture = bfd_architecture(7);
pub const bfd_architecture_bfd_arch_i386: bfd_architecture = bfd_architecture(8);
pub const bfd_architecture_bfd_arch_we32k: bfd_architecture = bfd_architecture(9);
pub const bfd_architecture_bfd_arch_tahoe: bfd_architecture = bfd_architecture(10);
pub const bfd_architecture_bfd_arch_i860: bfd_architecture = bfd_architecture(11);
pub const bfd_architecture_bfd_arch_romp: bfd_architecture = bfd_architecture(12);
pub const bfd_architecture_bfd_arch_alliant: bfd_architecture = bfd_architecture(13);
pub const bfd_architecture_bfd_arch_convex: bfd_architecture = bfd_architecture(14);
pub const bfd_architecture_bfd_arch_m88k: bfd_architecture = bfd_architecture(15);
pub const bfd_architecture_bfd_arch_pyramid: bfd_architecture = bfd_architecture(16);
pub const bfd_architecture_bfd_arch_h8300: bfd_architecture = bfd_architecture(17);
pub const bfd_architecture_bfd_arch_powerpc: bfd_architecture = bfd_architecture(18);
pub const bfd_architecture_bfd_arch_rs6000: bfd_architecture = bfd_architecture(19);
pub const bfd_architecture_bfd_arch_hppa: bfd_architecture = bfd_architecture(20);
pub const bfd_architecture_bfd_arch_d10v: bfd_architecture = bfd_architecture(21);
pub const bfd_architecture_bfd_arch_z8k: bfd_architecture = bfd_architecture(22);
pub const bfd_architecture_bfd_arch_h8500: bfd_architecture = bfd_architecture(23);
pub const bfd_architecture_bfd_arch_sh: bfd_architecture = bfd_architecture(24);
pub const bfd_architecture_bfd_arch_alpha: bfd_architecture = bfd_architecture(25);
pub const bfd_architecture_bfd_arch_arm: bfd_architecture = bfd_architecture(26);
pub const bfd_architecture_bfd_arch_ns32k: bfd_architecture = bfd_architecture(27);
pub const bfd_architecture_bfd_arch_w65: bfd_architecture = bfd_architecture(28);
pub const bfd_architecture_bfd_arch_tic30: bfd_architecture = bfd_architecture(29);
pub const bfd_architecture_bfd_arch_v850: bfd_architecture = bfd_architecture(30);
pub const bfd_architecture_bfd_arch_arc: bfd_architecture = bfd_architecture(31);
pub const bfd_architecture_bfd_arch_m32r: bfd_architecture = bfd_architecture(32);
pub const bfd_architecture_bfd_arch_mn10200: bfd_architecture = bfd_architecture(33);
pub const bfd_architecture_bfd_arch_mn10300: bfd_architecture = bfd_architecture(34);
pub const bfd_architecture_bfd_arch_avr: bfd_architecture = bfd_architecture(35);
pub const bfd_architecture_bfd_arch_cris: bfd_architecture = bfd_architecture(36);
pub const bfd_architecture_bfd_arch_microblaze: bfd_architecture = bfd_architecture(37);
pub const bfd_architecture_bfd_arch_moxie: bfd_architecture = bfd_architecture(38);
pub const bfd_architecture_bfd_arch_ia64: bfd_architecture = bfd_architecture(39);
pub const bfd_architecture_bfd_arch_nios2: bfd_architecture = bfd_architecture(40);
pub const bfd_architecture_bfd_arch_rx: bfd_architecture = bfd_architecture(41);
pub const bfd_architecture_bfd_arch_loongarch: bfd_architecture = bfd_architecture(42);
pub const bfd_architecture_bfd_arch_last: bfd_architecture = bfd_architecture(43);
impl ::std::ops::BitOr<bfd_architecture> for bfd_architecture {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        bfd_architecture(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for bfd_architecture {
    #[inline]
    fn bitor_assign(&mut self, rhs: bfd_architecture) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<bfd_architecture> for bfd_architecture {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        bfd_architecture(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for bfd_architecture {
    #[inline]
    fn bitand_assign(&mut self, rhs: bfd_architecture) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct bfd_architecture(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Copy, Clone)]
pub struct symbol_cache_entry {
    pub name: *const ::std::os::raw::c_char,
    pub udata: symbol_cache_entry__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union symbol_cache_entry__bindgen_ty_1 {
    pub p: PTR,
    pub i: bfd_vma,
}
#[test]
fn bindgen_test_layout_symbol_cache_entry__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<symbol_cache_entry__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<symbol_cache_entry__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(symbol_cache_entry__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<symbol_cache_entry__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(symbol_cache_entry__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(symbol_cache_entry__bindgen_ty_1),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(symbol_cache_entry__bindgen_ty_1),
            "::",
            stringify!(i)
        )
    );
}
impl Default for symbol_cache_entry__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for symbol_cache_entry__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "symbol_cache_entry__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_symbol_cache_entry() {
    const UNINIT: ::std::mem::MaybeUninit<symbol_cache_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<symbol_cache_entry>(),
        16usize,
        concat!("Size of: ", stringify!(symbol_cache_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<symbol_cache_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(symbol_cache_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(symbol_cache_entry),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).udata) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(symbol_cache_entry),
            "::",
            stringify!(udata)
        )
    );
}
impl Default for symbol_cache_entry {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for symbol_cache_entry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "symbol_cache_entry {{ name: {:?}, udata: {:?} }}",
            self.name, self.udata
        )
    }
}
pub type asymbol = symbol_cache_entry;
pub type fprintf_function = ::std::option::Option<
    unsafe extern "C" fn(
        f: *mut FILE,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int,
>;
pub const dis_insn_type_dis_noninsn: dis_insn_type = dis_insn_type(0);
pub const dis_insn_type_dis_nonbranch: dis_insn_type = dis_insn_type(1);
pub const dis_insn_type_dis_branch: dis_insn_type = dis_insn_type(2);
pub const dis_insn_type_dis_condbranch: dis_insn_type = dis_insn_type(3);
pub const dis_insn_type_dis_jsr: dis_insn_type = dis_insn_type(4);
pub const dis_insn_type_dis_condjsr: dis_insn_type = dis_insn_type(5);
pub const dis_insn_type_dis_dref: dis_insn_type = dis_insn_type(6);
pub const dis_insn_type_dis_dref2: dis_insn_type = dis_insn_type(7);
impl ::std::ops::BitOr<dis_insn_type> for dis_insn_type {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        dis_insn_type(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for dis_insn_type {
    #[inline]
    fn bitor_assign(&mut self, rhs: dis_insn_type) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<dis_insn_type> for dis_insn_type {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        dis_insn_type(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for dis_insn_type {
    #[inline]
    fn bitand_assign(&mut self, rhs: dis_insn_type) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct dis_insn_type(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct disassemble_info {
    pub fprintf_func: fprintf_function,
    pub stream: *mut FILE,
    pub application_data: PTR,
    pub flavour: bfd_flavour,
    pub arch: bfd_architecture,
    pub mach: ::std::os::raw::c_ulong,
    pub endian: bfd_endian,
    pub symbols: *mut *mut asymbol,
    pub num_symbols: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_ulong,
    pub private_data: PTR,
    pub read_memory_func: ::std::option::Option<
        unsafe extern "C" fn(
            memaddr: bfd_vma,
            myaddr: *mut bfd_byte,
            length: ::std::os::raw::c_int,
            info: *mut disassemble_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub memory_error_func: ::std::option::Option<
        unsafe extern "C" fn(
            status: ::std::os::raw::c_int,
            memaddr: bfd_vma,
            info: *mut disassemble_info,
        ),
    >,
    pub print_address_func:
        ::std::option::Option<unsafe extern "C" fn(addr: bfd_vma, info: *mut disassemble_info)>,
    pub print_insn: ::std::option::Option<
        unsafe extern "C" fn(addr: bfd_vma, info: *mut disassemble_info) -> ::std::os::raw::c_int,
    >,
    pub symbol_at_address_func: ::std::option::Option<
        unsafe extern "C" fn(addr: bfd_vma, info: *mut disassemble_info) -> ::std::os::raw::c_int,
    >,
    pub buffer: *const bfd_byte,
    pub buffer_vma: bfd_vma,
    pub buffer_length: ::std::os::raw::c_int,
    pub bytes_per_line: ::std::os::raw::c_int,
    pub bytes_per_chunk: ::std::os::raw::c_int,
    pub display_endian: bfd_endian,
    pub insn_info_valid: ::std::os::raw::c_char,
    pub branch_delay_insns: ::std::os::raw::c_char,
    pub data_size: ::std::os::raw::c_char,
    pub insn_type: dis_insn_type,
    pub target: bfd_vma,
    pub target2: bfd_vma,
    pub disassembler_options: *mut ::std::os::raw::c_char,
    pub target_info: *mut ::std::os::raw::c_void,
    pub cap_arch: ::std::os::raw::c_int,
    pub cap_mode: ::std::os::raw::c_int,
    pub cap_insn_unit: ::std::os::raw::c_int,
    pub cap_insn_split: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_disassemble_info() {
    const UNINIT: ::std::mem::MaybeUninit<disassemble_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<disassemble_info>(),
        208usize,
        concat!("Size of: ", stringify!(disassemble_info))
    );
    assert_eq!(
        ::std::mem::align_of::<disassemble_info>(),
        8usize,
        concat!("Alignment of ", stringify!(disassemble_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fprintf_func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(fprintf_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).application_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(application_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flavour) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(flavour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arch) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mach) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(mach)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endian) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(endian)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbols) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(symbols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_symbols) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(num_symbols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).private_data) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(private_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_memory_func) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(read_memory_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory_error_func) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(memory_error_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).print_address_func) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(print_address_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).print_insn) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(print_insn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol_at_address_func) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(symbol_at_address_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_vma) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(buffer_vma)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_length) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(buffer_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_per_line) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(bytes_per_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_per_chunk) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(bytes_per_chunk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_endian) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(display_endian)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).insn_info_valid) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(insn_info_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).branch_delay_insns) as usize - ptr as usize },
        153usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(branch_delay_insns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_size) as usize - ptr as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).insn_type) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(insn_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target2) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(target2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disassembler_options) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(disassembler_options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_info) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(target_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cap_arch) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(cap_arch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cap_mode) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(cap_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cap_insn_unit) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(cap_insn_unit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cap_insn_split) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(disassemble_info),
            "::",
            stringify!(cap_insn_split)
        )
    );
}
impl Default for disassemble_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " vaddr:\n Type wide enough to contain any #target_ulong virtual address."]
pub type vaddr = u64;
pub const device_endian_DEVICE_NATIVE_ENDIAN: device_endian = device_endian(0);
pub const device_endian_DEVICE_BIG_ENDIAN: device_endian = device_endian(1);
pub const device_endian_DEVICE_LITTLE_ENDIAN: device_endian = device_endian(2);
impl ::std::ops::BitOr<device_endian> for device_endian {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        device_endian(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for device_endian {
    #[inline]
    fn bitor_assign(&mut self, rhs: device_endian) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<device_endian> for device_endian {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        device_endian(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for device_endian {
    #[inline]
    fn bitand_assign(&mut self, rhs: device_endian) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct device_endian(pub ::std::os::raw::c_uint);
extern "C" {
    pub fn cpu_physical_memory_rw(
        addr: hwaddr,
        buf: *mut ::std::os::raw::c_void,
        len: hwaddr,
        is_write: bool,
    );
}
extern "C" {
    pub fn cpu_memory_rw_debug(
        cpu: *mut CPUState,
        addr: vaddr,
        ptr: *mut ::std::os::raw::c_void,
        len: usize,
        is_write: bool,
    ) -> ::std::os::raw::c_int;
}
pub const GuestPanicInformationType_GUEST_PANIC_INFORMATION_TYPE_HYPER_V:
    GuestPanicInformationType = GuestPanicInformationType(0);
pub const GuestPanicInformationType_GUEST_PANIC_INFORMATION_TYPE_S390: GuestPanicInformationType =
    GuestPanicInformationType(1);
pub const GuestPanicInformationType_GUEST_PANIC_INFORMATION_TYPE__MAX: GuestPanicInformationType =
    GuestPanicInformationType(2);
impl ::std::ops::BitOr<GuestPanicInformationType> for GuestPanicInformationType {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        GuestPanicInformationType(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for GuestPanicInformationType {
    #[inline]
    fn bitor_assign(&mut self, rhs: GuestPanicInformationType) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<GuestPanicInformationType> for GuestPanicInformationType {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        GuestPanicInformationType(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for GuestPanicInformationType {
    #[inline]
    fn bitand_assign(&mut self, rhs: GuestPanicInformationType) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct GuestPanicInformationType(pub ::std::os::raw::c_uint);
pub const S390CrashReason_S390_CRASH_REASON_UNKNOWN: S390CrashReason = S390CrashReason(0);
pub const S390CrashReason_S390_CRASH_REASON_DISABLED_WAIT: S390CrashReason = S390CrashReason(1);
pub const S390CrashReason_S390_CRASH_REASON_EXTINT_LOOP: S390CrashReason = S390CrashReason(2);
pub const S390CrashReason_S390_CRASH_REASON_PGMINT_LOOP: S390CrashReason = S390CrashReason(3);
pub const S390CrashReason_S390_CRASH_REASON_OPINT_LOOP: S390CrashReason = S390CrashReason(4);
pub const S390CrashReason_S390_CRASH_REASON__MAX: S390CrashReason = S390CrashReason(5);
impl ::std::ops::BitOr<S390CrashReason> for S390CrashReason {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        S390CrashReason(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for S390CrashReason {
    #[inline]
    fn bitor_assign(&mut self, rhs: S390CrashReason) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<S390CrashReason> for S390CrashReason {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        S390CrashReason(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for S390CrashReason {
    #[inline]
    fn bitand_assign(&mut self, rhs: S390CrashReason) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct S390CrashReason(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GuestPanicInformationHyperV {
    pub arg1: u64,
    pub arg2: u64,
    pub arg3: u64,
    pub arg4: u64,
    pub arg5: u64,
}
#[test]
fn bindgen_test_layout_GuestPanicInformationHyperV() {
    const UNINIT: ::std::mem::MaybeUninit<GuestPanicInformationHyperV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GuestPanicInformationHyperV>(),
        40usize,
        concat!("Size of: ", stringify!(GuestPanicInformationHyperV))
    );
    assert_eq!(
        ::std::mem::align_of::<GuestPanicInformationHyperV>(),
        8usize,
        concat!("Alignment of ", stringify!(GuestPanicInformationHyperV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GuestPanicInformationHyperV),
            "::",
            stringify!(arg1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GuestPanicInformationHyperV),
            "::",
            stringify!(arg2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GuestPanicInformationHyperV),
            "::",
            stringify!(arg3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg4) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GuestPanicInformationHyperV),
            "::",
            stringify!(arg4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg5) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GuestPanicInformationHyperV),
            "::",
            stringify!(arg5)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GuestPanicInformationS390 {
    pub core: u32,
    pub psw_mask: u64,
    pub psw_addr: u64,
    pub reason: S390CrashReason,
}
#[test]
fn bindgen_test_layout_GuestPanicInformationS390() {
    const UNINIT: ::std::mem::MaybeUninit<GuestPanicInformationS390> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GuestPanicInformationS390>(),
        32usize,
        concat!("Size of: ", stringify!(GuestPanicInformationS390))
    );
    assert_eq!(
        ::std::mem::align_of::<GuestPanicInformationS390>(),
        8usize,
        concat!("Alignment of ", stringify!(GuestPanicInformationS390))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).core) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GuestPanicInformationS390),
            "::",
            stringify!(core)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psw_mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GuestPanicInformationS390),
            "::",
            stringify!(psw_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psw_addr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GuestPanicInformationS390),
            "::",
            stringify!(psw_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reason) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GuestPanicInformationS390),
            "::",
            stringify!(reason)
        )
    );
}
impl Default for GuestPanicInformationS390 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GuestPanicInformation {
    pub type_: GuestPanicInformationType,
    pub u: GuestPanicInformation__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union GuestPanicInformation__bindgen_ty_1 {
    pub hyper_v: GuestPanicInformationHyperV,
    pub s390: GuestPanicInformationS390,
}
#[test]
fn bindgen_test_layout_GuestPanicInformation__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<GuestPanicInformation__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GuestPanicInformation__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(GuestPanicInformation__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<GuestPanicInformation__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(GuestPanicInformation__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hyper_v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GuestPanicInformation__bindgen_ty_1),
            "::",
            stringify!(hyper_v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s390) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GuestPanicInformation__bindgen_ty_1),
            "::",
            stringify!(s390)
        )
    );
}
impl Default for GuestPanicInformation__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for GuestPanicInformation__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "GuestPanicInformation__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_GuestPanicInformation() {
    const UNINIT: ::std::mem::MaybeUninit<GuestPanicInformation> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GuestPanicInformation>(),
        48usize,
        concat!("Size of: ", stringify!(GuestPanicInformation))
    );
    assert_eq!(
        ::std::mem::align_of::<GuestPanicInformation>(),
        8usize,
        concat!("Alignment of ", stringify!(GuestPanicInformation))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GuestPanicInformation),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GuestPanicInformation),
            "::",
            stringify!(u)
        )
    );
}
impl Default for GuestPanicInformation {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for GuestPanicInformation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "GuestPanicInformation {{ type: {:?}, u: {:?} }}",
            self.type_, self.u
        )
    }
}
pub type WriteCoreDumpFunction = ::std::option::Option<
    unsafe extern "C" fn(
        buf: *const ::std::os::raw::c_void,
        size: usize,
        opaque: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCGCPUOps {
    _unused: [u8; 0],
}
#[doc = " CPUClass:\n @class_by_name: Callback to map -cpu command line model name to an\n instantiatable CPU type.\n @parse_features: Callback to parse command line arguments.\n @reset_dump_flags: #CPUDumpFlags to use for reset logging.\n @has_work: Callback for checking if there is work to do.\n @memory_rw_debug: Callback for GDB memory access.\n @dump_state: Callback for dumping state.\n @query_cpu_fast:\n       Fill in target specific information for the \"query-cpus-fast\"\n       QAPI call.\n @get_arch_id: Callback for getting architecture-dependent CPU ID.\n @set_pc: Callback for setting the Program Counter register. This\n       should have the semantics used by the target architecture when\n       setting the PC from a source such as an ELF file entry point;\n       for example on Arm it will also set the Thumb mode bit based\n       on the least significant bit of the new PC value.\n       If the target behaviour here is anything other than \"set\n       the PC register to the value passed in\" then the target must\n       also implement the synchronize_from_tb hook.\n @get_pc: Callback for getting the Program Counter register.\n       As above, with the semantics of the target architecture.\n @gdb_read_register: Callback for letting GDB read a register.\n @gdb_write_register: Callback for letting GDB write a register.\n @gdb_adjust_breakpoint: Callback for adjusting the address of a\n       breakpoint.  Used by AVR to handle a gdb mis-feature with\n       its Harvard architecture split code and data.\n @gdb_num_core_regs: Number of core registers accessible to GDB.\n @gdb_core_xml_file: File name for core registers GDB XML description.\n @gdb_stop_before_watchpoint: Indicates whether GDB expects the CPU to stop\n           before the insn which triggers a watchpoint rather than after it.\n @gdb_arch_name: Optional callback that returns the architecture name known\n to GDB. The caller must free the returned string with g_free.\n @gdb_get_dynamic_xml: Callback to return dynamically generated XML for the\n   gdb stub. Returns a pointer to the XML contents for the specified XML file\n   or NULL if the CPU doesn't have a dynamically generated content for it.\n @disas_set_info: Setup architecture specific components of disassembly info\n @adjust_watchpoint_address: Perform a target-specific adjustment to an\n address before attempting to match it against watchpoints.\n @deprecation_note: If this CPUClass is deprecated, this field provides\n                    related information.\n\n Represents a CPU family or model."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPUClass {
    pub parent_class: DeviceClass,
    pub class_by_name: ::std::option::Option<
        unsafe extern "C" fn(cpu_model: *const ::std::os::raw::c_char) -> *mut ObjectClass,
    >,
    pub parse_features: ::std::option::Option<
        unsafe extern "C" fn(
            typename: *const ::std::os::raw::c_char,
            str_: *mut ::std::os::raw::c_char,
            errp: *mut *mut Error,
        ),
    >,
    pub has_work: ::std::option::Option<unsafe extern "C" fn(cpu: *mut CPUState) -> bool>,
    pub memory_rw_debug: ::std::option::Option<
        unsafe extern "C" fn(
            cpu: *mut CPUState,
            addr: vaddr,
            buf: *mut u8,
            len: ::std::os::raw::c_int,
            is_write: bool,
        ) -> ::std::os::raw::c_int,
    >,
    pub dump_state: ::std::option::Option<
        unsafe extern "C" fn(cpu: *mut CPUState, arg1: *mut FILE, flags: ::std::os::raw::c_int),
    >,
    pub query_cpu_fast:
        ::std::option::Option<unsafe extern "C" fn(cpu: *mut CPUState, value: *mut CpuInfoFast)>,
    pub get_arch_id: ::std::option::Option<unsafe extern "C" fn(cpu: *mut CPUState) -> i64>,
    pub set_pc: ::std::option::Option<unsafe extern "C" fn(cpu: *mut CPUState, value: vaddr)>,
    pub get_pc: ::std::option::Option<unsafe extern "C" fn(cpu: *mut CPUState) -> vaddr>,
    pub gdb_read_register: ::std::option::Option<
        unsafe extern "C" fn(
            cpu: *mut CPUState,
            buf: *mut GByteArray,
            reg: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub gdb_write_register: ::std::option::Option<
        unsafe extern "C" fn(
            cpu: *mut CPUState,
            buf: *mut u8,
            reg: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub gdb_adjust_breakpoint:
        ::std::option::Option<unsafe extern "C" fn(cpu: *mut CPUState, addr: vaddr) -> vaddr>,
    pub gdb_core_xml_file: *const ::std::os::raw::c_char,
    pub gdb_arch_name:
        ::std::option::Option<unsafe extern "C" fn(cpu: *mut CPUState) -> *mut gchar>,
    pub gdb_get_dynamic_xml: ::std::option::Option<
        unsafe extern "C" fn(
            cpu: *mut CPUState,
            xmlname: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub disas_set_info: ::std::option::Option<
        unsafe extern "C" fn(cpu: *mut CPUState, info: *mut disassemble_info),
    >,
    pub deprecation_note: *const ::std::os::raw::c_char,
    pub accel_cpu: *mut AccelCPUClass,
    pub sysemu_ops: *const SysemuCPUOps,
    pub tcg_ops: *const TCGCPUOps,
    pub init_accel_cpu: ::std::option::Option<
        unsafe extern "C" fn(accel_cpu: *mut AccelCPUClass, cc: *mut CPUClass),
    >,
    pub reset_dump_flags: ::std::os::raw::c_int,
    pub gdb_num_core_regs: ::std::os::raw::c_int,
    pub gdb_stop_before_watchpoint: bool,
}
#[test]
fn bindgen_test_layout_CPUClass() {
    const UNINIT: ::std::mem::MaybeUninit<CPUClass> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUClass>(),
        360usize,
        concat!("Size of: ", stringify!(CPUClass))
    );
    assert_eq!(
        ::std::mem::align_of::<CPUClass>(),
        8usize,
        concat!("Alignment of ", stringify!(CPUClass))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent_class) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUClass),
            "::",
            stringify!(parent_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_by_name) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUClass),
            "::",
            stringify!(class_by_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parse_features) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUClass),
            "::",
            stringify!(parse_features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_work) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUClass),
            "::",
            stringify!(has_work)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory_rw_debug) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUClass),
            "::",
            stringify!(memory_rw_debug)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dump_state) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUClass),
            "::",
            stringify!(dump_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).query_cpu_fast) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUClass),
            "::",
            stringify!(query_cpu_fast)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_arch_id) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUClass),
            "::",
            stringify!(get_arch_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_pc) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUClass),
            "::",
            stringify!(set_pc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_pc) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUClass),
            "::",
            stringify!(get_pc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gdb_read_register) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUClass),
            "::",
            stringify!(gdb_read_register)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gdb_write_register) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUClass),
            "::",
            stringify!(gdb_write_register)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gdb_adjust_breakpoint) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUClass),
            "::",
            stringify!(gdb_adjust_breakpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gdb_core_xml_file) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUClass),
            "::",
            stringify!(gdb_core_xml_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gdb_arch_name) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUClass),
            "::",
            stringify!(gdb_arch_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gdb_get_dynamic_xml) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUClass),
            "::",
            stringify!(gdb_get_dynamic_xml)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disas_set_info) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUClass),
            "::",
            stringify!(disas_set_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deprecation_note) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUClass),
            "::",
            stringify!(deprecation_note)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accel_cpu) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUClass),
            "::",
            stringify!(accel_cpu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sysemu_ops) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUClass),
            "::",
            stringify!(sysemu_ops)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcg_ops) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUClass),
            "::",
            stringify!(tcg_ops)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_accel_cpu) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUClass),
            "::",
            stringify!(init_accel_cpu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reset_dump_flags) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUClass),
            "::",
            stringify!(reset_dump_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gdb_num_core_regs) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUClass),
            "::",
            stringify!(gdb_num_core_regs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gdb_stop_before_watchpoint) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUClass),
            "::",
            stringify!(gdb_stop_before_watchpoint)
        )
    );
}
impl Default for CPUClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IcountDecr {
    pub u32_: u32,
    pub u16_: IcountDecr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IcountDecr__bindgen_ty_1 {
    pub low: u16,
    pub high: u16,
}
#[test]
fn bindgen_test_layout_IcountDecr__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<IcountDecr__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IcountDecr__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(IcountDecr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<IcountDecr__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(IcountDecr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IcountDecr__bindgen_ty_1),
            "::",
            stringify!(low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).high) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IcountDecr__bindgen_ty_1),
            "::",
            stringify!(high)
        )
    );
}
#[test]
fn bindgen_test_layout_IcountDecr() {
    const UNINIT: ::std::mem::MaybeUninit<IcountDecr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IcountDecr>(),
        4usize,
        concat!("Size of: ", stringify!(IcountDecr))
    );
    assert_eq!(
        ::std::mem::align_of::<IcountDecr>(),
        4usize,
        concat!("Alignment of ", stringify!(IcountDecr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IcountDecr),
            "::",
            stringify!(u32_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u16_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IcountDecr),
            "::",
            stringify!(u16_)
        )
    );
}
impl Default for IcountDecr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for IcountDecr {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "IcountDecr {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CPUBreakpoint {
    pub pc: vaddr,
    pub flags: ::std::os::raw::c_int,
    pub entry: CPUBreakpoint__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CPUBreakpoint__bindgen_ty_1 {
    pub tqe_next: *mut CPUBreakpoint,
    pub tqe_circ: QTailQLink,
}
#[test]
fn bindgen_test_layout_CPUBreakpoint__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CPUBreakpoint__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUBreakpoint__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(CPUBreakpoint__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<CPUBreakpoint__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(CPUBreakpoint__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqe_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUBreakpoint__bindgen_ty_1),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqe_circ) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUBreakpoint__bindgen_ty_1),
            "::",
            stringify!(tqe_circ)
        )
    );
}
impl Default for CPUBreakpoint__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for CPUBreakpoint__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "CPUBreakpoint__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_CPUBreakpoint() {
    const UNINIT: ::std::mem::MaybeUninit<CPUBreakpoint> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUBreakpoint>(),
        32usize,
        concat!("Size of: ", stringify!(CPUBreakpoint))
    );
    assert_eq!(
        ::std::mem::align_of::<CPUBreakpoint>(),
        8usize,
        concat!("Alignment of ", stringify!(CPUBreakpoint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUBreakpoint),
            "::",
            stringify!(pc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUBreakpoint),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entry) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUBreakpoint),
            "::",
            stringify!(entry)
        )
    );
}
impl Default for CPUBreakpoint {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for CPUBreakpoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "CPUBreakpoint {{ flags: {:?}, entry: {:?} }}",
            self.flags, self.entry
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CPUWatchpoint {
    pub vaddr: vaddr,
    pub len: vaddr,
    pub hitaddr: vaddr,
    pub hitattrs: MemTxAttrs,
    pub flags: ::std::os::raw::c_int,
    pub entry: CPUWatchpoint__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CPUWatchpoint__bindgen_ty_1 {
    pub tqe_next: *mut CPUWatchpoint,
    pub tqe_circ: QTailQLink,
}
#[test]
fn bindgen_test_layout_CPUWatchpoint__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CPUWatchpoint__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUWatchpoint__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(CPUWatchpoint__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<CPUWatchpoint__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(CPUWatchpoint__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqe_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUWatchpoint__bindgen_ty_1),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqe_circ) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUWatchpoint__bindgen_ty_1),
            "::",
            stringify!(tqe_circ)
        )
    );
}
impl Default for CPUWatchpoint__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for CPUWatchpoint__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "CPUWatchpoint__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_CPUWatchpoint() {
    const UNINIT: ::std::mem::MaybeUninit<CPUWatchpoint> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUWatchpoint>(),
        48usize,
        concat!("Size of: ", stringify!(CPUWatchpoint))
    );
    assert_eq!(
        ::std::mem::align_of::<CPUWatchpoint>(),
        8usize,
        concat!("Alignment of ", stringify!(CPUWatchpoint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUWatchpoint),
            "::",
            stringify!(vaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUWatchpoint),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hitaddr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUWatchpoint),
            "::",
            stringify!(hitaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hitattrs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUWatchpoint),
            "::",
            stringify!(hitattrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUWatchpoint),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entry) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUWatchpoint),
            "::",
            stringify!(entry)
        )
    );
}
impl Default for CPUWatchpoint {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for CPUWatchpoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "CPUWatchpoint {{ hitattrs: {:?}, flags: {:?}, entry: {:?} }}",
            self.hitattrs, self.flags, self.entry
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SavedIOTLB {
    pub section: *mut MemoryRegionSection,
    pub mr_offset: hwaddr,
}
#[test]
fn bindgen_test_layout_SavedIOTLB() {
    const UNINIT: ::std::mem::MaybeUninit<SavedIOTLB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SavedIOTLB>(),
        16usize,
        concat!("Size of: ", stringify!(SavedIOTLB))
    );
    assert_eq!(
        ::std::mem::align_of::<SavedIOTLB>(),
        8usize,
        concat!("Alignment of ", stringify!(SavedIOTLB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).section) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SavedIOTLB),
            "::",
            stringify!(section)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mr_offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SavedIOTLB),
            "::",
            stringify!(mr_offset)
        )
    );
}
impl Default for SavedIOTLB {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KVMState {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kvm_run {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hax_vcpu_state {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvf_vcpu_state {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qemu_work_item {
    _unused: [u8; 0],
}
#[doc = " CPUState:\n @cpu_index: CPU index (informative).\n @cluster_index: Identifies which cluster this CPU is in.\n   For boards which don't define clusters or for \"loose\" CPUs not assigned\n   to a cluster this will be UNASSIGNED_CLUSTER_INDEX; otherwise it will\n   be the same as the cluster-id property of the CPU object's TYPE_CPU_CLUSTER\n   QOM parent.\n   Under TCG this value is propagated to @tcg_cflags.\n   See TranslationBlock::TCG CF_CLUSTER_MASK.\n @tcg_cflags: Pre-computed cflags for this cpu.\n @nr_cores: Number of cores within this CPU package.\n @nr_threads: Number of threads within this CPU.\n @running: #true if CPU is currently running (lockless).\n @has_waiter: #true if a CPU is currently waiting for the cpu_exec_end;\n valid under cpu_list_lock.\n @created: Indicates whether the CPU thread has been successfully created.\n @interrupt_request: Indicates a pending interrupt request.\n @halted: Nonzero if the CPU is in suspended state.\n @stop: Indicates a pending stop request.\n @stopped: Indicates the CPU has been artificially stopped.\n @unplug: Indicates a pending CPU unplug request.\n @crash_occurred: Indicates the OS reported a crash (panic) for this CPU\n @singlestep_enabled: Flags for single-stepping.\n @icount_extra: Instructions until next timer event.\n @can_do_io: Nonzero if memory-mapped IO is safe. Deterministic execution\n requires that IO only be performed on the last instruction of a TB\n so that interrupts take effect immediately.\n @cpu_ases: Pointer to array of CPUAddressSpaces (which define the\n            AddressSpaces this CPU has)\n @num_ases: number of CPUAddressSpaces in @cpu_ases\n @as: Pointer to the first AddressSpace, for the convenience of targets which\n      only have a single AddressSpace\n @env_ptr: Pointer to subclass-specific CPUArchState field.\n @icount_decr_ptr: Pointer to IcountDecr field within subclass.\n @gdb_regs: Additional GDB registers.\n @gdb_num_regs: Number of total registers accessible to GDB.\n @gdb_num_g_regs: Number of registers in GDB 'g' packets.\n @next_cpu: Next CPU sharing TB cache.\n @opaque: User data.\n @mem_io_pc: Host Program Counter at which the memory was accessed.\n @kvm_fd: vCPU file descriptor for KVM.\n @work_mutex: Lock to prevent multiple access to @work_list.\n @work_list: List of pending asynchronous work.\n @trace_dstate_delayed: Delayed changes to trace_dstate (includes all changes\n                        to @trace_dstate).\n @trace_dstate: Dynamic tracing state of events for this vCPU (bitmask).\n @plugin_mask: Plugin event bitmap. Modified only via async work.\n @ignore_memory_transaction_failures: Cached copy of the MachineState\n    flag of the same name: allows the board to suppress calling of the\n    CPU do_transaction_failed hook function.\n @kvm_dirty_gfns: Points to the KVM dirty ring for this CPU when KVM dirty\n    ring is enabled.\n @kvm_fetch_index: Keeps the index that we last fetched from the per-vCPU\n    dirty ring structure.\n\n State of one CPU core or thread."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CPUState {
    pub parent_obj: DeviceState,
    pub cc: *mut CPUClass,
    pub nr_cores: ::std::os::raw::c_int,
    pub nr_threads: ::std::os::raw::c_int,
    pub thread: *mut QemuThread,
    pub thread_id: ::std::os::raw::c_int,
    pub running: bool,
    pub has_waiter: bool,
    pub halt_cond: *mut QemuCond,
    pub thread_kicked: bool,
    pub created: bool,
    pub stop: bool,
    pub stopped: bool,
    pub start_powered_off: bool,
    pub unplug: bool,
    pub crash_occurred: bool,
    pub exit_request: bool,
    pub exclusive_context_count: ::std::os::raw::c_int,
    pub cflags_next_tb: u32,
    pub interrupt_request: u32,
    pub singlestep_enabled: ::std::os::raw::c_int,
    pub icount_budget: i64,
    pub icount_extra: i64,
    pub random_seed: u64,
    pub jmp_env: sigjmp_buf,
    pub work_mutex: QemuMutex,
    pub work_list: CPUState__bindgen_ty_1,
    pub cpu_ases: *mut CPUAddressSpace,
    pub num_ases: ::std::os::raw::c_int,
    pub as_: *mut AddressSpace,
    pub memory: *mut MemoryRegion,
    pub env_ptr: *mut CPUArchState,
    pub icount_decr_ptr: *mut IcountDecr,
    pub tb_jmp_cache: *mut CPUJumpCache,
    pub gdb_regs: *mut GDBRegisterState,
    pub gdb_num_regs: ::std::os::raw::c_int,
    pub gdb_num_g_regs: ::std::os::raw::c_int,
    pub node: CPUState__bindgen_ty_2,
    pub breakpoints: CPUState__bindgen_ty_3,
    pub watchpoints: CPUState__bindgen_ty_4,
    pub watchpoint_hit: *mut CPUWatchpoint,
    pub opaque: *mut ::std::os::raw::c_void,
    pub mem_io_pc: usize,
    pub kvm_fd: ::std::os::raw::c_int,
    pub kvm_state: *mut KVMState,
    pub kvm_run: *mut kvm_run,
    pub kvm_dirty_gfns: *mut kvm_dirty_gfn,
    pub kvm_fetch_index: u32,
    pub dirty_pages: u64,
    pub in_ioctl_lock: QemuLockCnt,
    pub plugin_mask: [::std::os::raw::c_ulong; 1usize],
    pub plugin_mem_cbs: *mut GArray,
    pub saved_iotlb: SavedIOTLB,
    pub cpu_index: ::std::os::raw::c_int,
    pub cluster_index: ::std::os::raw::c_int,
    pub tcg_cflags: u32,
    pub halted: u32,
    pub can_do_io: u32,
    pub exception_index: i32,
    pub vcpu_dirty: bool,
    pub throttle_thread_scheduled: bool,
    pub throttle_us_per_full: i64,
    pub ignore_memory_transaction_failures: bool,
    pub prctl_unalign_sigbus: bool,
    pub hax_vcpu: *mut hax_vcpu_state,
    pub hvf: *mut hvf_vcpu_state,
    pub iommu_notifiers: *mut GArray,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPUState__bindgen_ty_1 {
    pub sqh_first: *mut qemu_work_item,
    pub sqh_last: *mut *mut qemu_work_item,
}
#[test]
fn bindgen_test_layout_CPUState__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CPUState__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUState__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(CPUState__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<CPUState__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(CPUState__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sqh_first) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState__bindgen_ty_1),
            "::",
            stringify!(sqh_first)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sqh_last) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState__bindgen_ty_1),
            "::",
            stringify!(sqh_last)
        )
    );
}
impl Default for CPUState__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CPUState__bindgen_ty_2 {
    pub tqe_next: *mut CPUState,
    pub tqe_circ: QTailQLink,
}
#[test]
fn bindgen_test_layout_CPUState__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<CPUState__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUState__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(CPUState__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<CPUState__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(CPUState__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqe_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState__bindgen_ty_2),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqe_circ) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState__bindgen_ty_2),
            "::",
            stringify!(tqe_circ)
        )
    );
}
impl Default for CPUState__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for CPUState__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "CPUState__bindgen_ty_2 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CPUState__bindgen_ty_3 {
    pub tqh_first: *mut CPUBreakpoint,
    pub tqh_circ: QTailQLink,
}
#[test]
fn bindgen_test_layout_CPUState__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<CPUState__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUState__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(CPUState__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<CPUState__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(CPUState__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqh_first) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState__bindgen_ty_3),
            "::",
            stringify!(tqh_first)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqh_circ) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState__bindgen_ty_3),
            "::",
            stringify!(tqh_circ)
        )
    );
}
impl Default for CPUState__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for CPUState__bindgen_ty_3 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "CPUState__bindgen_ty_3 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CPUState__bindgen_ty_4 {
    pub tqh_first: *mut CPUWatchpoint,
    pub tqh_circ: QTailQLink,
}
#[test]
fn bindgen_test_layout_CPUState__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<CPUState__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUState__bindgen_ty_4>(),
        16usize,
        concat!("Size of: ", stringify!(CPUState__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<CPUState__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(CPUState__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqh_first) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState__bindgen_ty_4),
            "::",
            stringify!(tqh_first)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqh_circ) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState__bindgen_ty_4),
            "::",
            stringify!(tqh_circ)
        )
    );
}
impl Default for CPUState__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for CPUState__bindgen_ty_4 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "CPUState__bindgen_ty_4 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_CPUState() {
    const UNINIT: ::std::mem::MaybeUninit<CPUState> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUState>(),
        816usize,
        concat!("Size of: ", stringify!(CPUState))
    );
    assert_eq!(
        ::std::mem::align_of::<CPUState>(),
        8usize,
        concat!("Alignment of ", stringify!(CPUState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent_obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(parent_obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cc) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(cc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nr_cores) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(nr_cores)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nr_threads) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(nr_threads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(thread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_id) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(thread_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).running) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(running)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_waiter) as usize - ptr as usize },
        189usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(has_waiter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).halt_cond) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(halt_cond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_kicked) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(thread_kicked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).created) as usize - ptr as usize },
        201usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(created)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop) as usize - ptr as usize },
        202usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(stop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stopped) as usize - ptr as usize },
        203usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(stopped)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_powered_off) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(start_powered_off)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unplug) as usize - ptr as usize },
        205usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(unplug)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crash_occurred) as usize - ptr as usize },
        206usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(crash_occurred)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exit_request) as usize - ptr as usize },
        207usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(exit_request)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exclusive_context_count) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(exclusive_context_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cflags_next_tb) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(cflags_next_tb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interrupt_request) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(interrupt_request)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).singlestep_enabled) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(singlestep_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icount_budget) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(icount_budget)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icount_extra) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(icount_extra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).random_seed) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(random_seed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jmp_env) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(jmp_env)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).work_mutex) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(work_mutex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).work_list) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(work_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_ases) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(cpu_ases)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_ases) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(num_ases)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as_) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(as_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).env_ptr) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(env_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icount_decr_ptr) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(icount_decr_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tb_jmp_cache) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(tb_jmp_cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gdb_regs) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(gdb_regs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gdb_num_regs) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(gdb_num_regs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gdb_num_g_regs) as usize - ptr as usize },
        580usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(gdb_num_g_regs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).breakpoints) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(breakpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).watchpoints) as usize - ptr as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(watchpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).watchpoint_hit) as usize - ptr as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(watchpoint_hit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(opaque)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_io_pc) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(mem_io_pc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kvm_fd) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(kvm_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kvm_state) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(kvm_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kvm_run) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(kvm_run)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kvm_dirty_gfns) as usize - ptr as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(kvm_dirty_gfns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kvm_fetch_index) as usize - ptr as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(kvm_fetch_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dirty_pages) as usize - ptr as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(dirty_pages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_ioctl_lock) as usize - ptr as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(in_ioctl_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plugin_mask) as usize - ptr as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(plugin_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plugin_mem_cbs) as usize - ptr as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(plugin_mem_cbs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).saved_iotlb) as usize - ptr as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(saved_iotlb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_index) as usize - ptr as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(cpu_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cluster_index) as usize - ptr as usize },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(cluster_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcg_cflags) as usize - ptr as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(tcg_cflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).halted) as usize - ptr as usize },
        756usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(halted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).can_do_io) as usize - ptr as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(can_do_io)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exception_index) as usize - ptr as usize },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(exception_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vcpu_dirty) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(vcpu_dirty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).throttle_thread_scheduled) as usize - ptr as usize },
        769usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(throttle_thread_scheduled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).throttle_us_per_full) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(throttle_us_per_full)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ignore_memory_transaction_failures) as usize - ptr as usize
        },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(ignore_memory_transaction_failures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prctl_unalign_sigbus) as usize - ptr as usize },
        785usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(prctl_unalign_sigbus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hax_vcpu) as usize - ptr as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(hax_vcpu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hvf) as usize - ptr as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(hvf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iommu_notifiers) as usize - ptr as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUState),
            "::",
            stringify!(iommu_notifiers)
        )
    );
}
impl Default for CPUState {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for CPUState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "CPUState {{ parent_obj: {:?}, cc: {:?}, nr_cores: {:?}, nr_threads: {:?}, thread: {:?}, thread_id: {:?}, running: {:?}, has_waiter: {:?}, halt_cond: {:?}, thread_kicked: {:?}, created: {:?}, stop: {:?}, stopped: {:?}, start_powered_off: {:?}, unplug: {:?}, crash_occurred: {:?}, exit_request: {:?}, exclusive_context_count: {:?}, singlestep_enabled: {:?}, jmp_env: {:?}, work_mutex: {:?}, work_list: {:?}, cpu_ases: {:?}, num_ases: {:?}, as: {:?}, memory: {:?}, env_ptr: {:?}, icount_decr_ptr: {:?}, tb_jmp_cache: {:?}, gdb_regs: {:?}, gdb_num_regs: {:?}, gdb_num_g_regs: {:?}, node: {:?}, breakpoints: {:?}, watchpoints: {:?}, watchpoint_hit: {:?}, opaque: {:?}, kvm_fd: {:?}, kvm_state: {:?}, kvm_run: {:?}, kvm_dirty_gfns: {:?}, in_ioctl_lock: {:?}, plugin_mask: {:?}, plugin_mem_cbs: {:?}, saved_iotlb: {:?}, cpu_index: {:?}, cluster_index: {:?}, vcpu_dirty: {:?}, throttle_thread_scheduled: {:?}, ignore_memory_transaction_failures: {:?}, prctl_unalign_sigbus: {:?}, hax_vcpu: {:?}, hvf: {:?}, iommu_notifiers: {:?} }}" , self . parent_obj , self . cc , self . nr_cores , self . nr_threads , self . thread , self . thread_id , self . running , self . has_waiter , self . halt_cond , self . thread_kicked , self . created , self . stop , self . stopped , self . start_powered_off , self . unplug , self . crash_occurred , self . exit_request , self . exclusive_context_count , self . singlestep_enabled , self . jmp_env , self . work_mutex , self . work_list , self . cpu_ases , self . num_ases , self . as_ , self . memory , self . env_ptr , self . icount_decr_ptr , self . tb_jmp_cache , self . gdb_regs , self . gdb_num_regs , self . gdb_num_g_regs , self . node , self . breakpoints , self . watchpoints , self . watchpoint_hit , self . opaque , self . kvm_fd , self . kvm_state , self . kvm_run , self . kvm_dirty_gfns , self . in_ioctl_lock , self . plugin_mask , self . plugin_mem_cbs , self . saved_iotlb , self . cpu_index , self . cluster_index , self . vcpu_dirty , self . throttle_thread_scheduled , self . ignore_memory_transaction_failures , self . prctl_unalign_sigbus , self . hax_vcpu , self . hvf , self . iommu_notifiers)
    }
}
extern "C" {
    #[doc = " cpu_get_phys_page_attrs_debug:\n @cpu: The CPU to obtain the physical page address for.\n @addr: The virtual address.\n @attrs: Updated on return with the memory transaction attributes to use\n         for this access.\n\n Obtains the physical page corresponding to a virtual one, together\n with the corresponding memory transaction attributes to use for the access.\n Use it only for debugging because no protection checks are done.\n\n Returns: Corresponding physical page address or -1 if no page found."]
    pub fn cpu_get_phys_page_attrs_debug(
        cpu: *mut CPUState,
        addr: vaddr,
        attrs: *mut MemTxAttrs,
    ) -> hwaddr;
}
extern "C" {
    #[doc = " cpu_reset:\n @cpu: The CPU whose state is to be reset."]
    pub fn cpu_reset(cpu: *mut CPUState);
}
pub type target_long = i32;
pub type target_ulong = u32;
#[doc = " Property:\n @set_default: true if the default value should be set from @defval,\n    in which case @info->set_default_value must not be NULL\n    (if false then no default value is set by the property system\n     and the field retains whatever value it was given by instance_init).\n @defval: default value for the property. This is used only if @set_default\n     is true."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Property {
    pub name: *const ::std::os::raw::c_char,
    pub info: *const PropertyInfo,
    pub offset: isize,
    pub bitnr: u8,
    pub bitmask: u64,
    pub set_default: bool,
    pub defval: Property__bindgen_ty_1,
    pub arrayoffset: ::std::os::raw::c_int,
    pub arrayinfo: *const PropertyInfo,
    pub arrayfieldsize: ::std::os::raw::c_int,
    pub link_type: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Property__bindgen_ty_1 {
    pub i: i64,
    pub u: u64,
}
#[test]
fn bindgen_test_layout_Property__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<Property__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Property__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(Property__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Property__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(Property__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Property__bindgen_ty_1),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Property__bindgen_ty_1),
            "::",
            stringify!(u)
        )
    );
}
impl Default for Property__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for Property__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "Property__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_Property() {
    const UNINIT: ::std::mem::MaybeUninit<Property> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Property>(),
        88usize,
        concat!("Size of: ", stringify!(Property))
    );
    assert_eq!(
        ::std::mem::align_of::<Property>(),
        8usize,
        concat!("Alignment of ", stringify!(Property))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Property),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Property),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Property),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitnr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Property),
            "::",
            stringify!(bitnr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitmask) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Property),
            "::",
            stringify!(bitmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_default) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Property),
            "::",
            stringify!(set_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defval) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Property),
            "::",
            stringify!(defval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrayoffset) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Property),
            "::",
            stringify!(arrayoffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrayinfo) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Property),
            "::",
            stringify!(arrayinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrayfieldsize) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Property),
            "::",
            stringify!(arrayfieldsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).link_type) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Property),
            "::",
            stringify!(link_type)
        )
    );
}
impl Default for Property {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for Property {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "Property {{ name: {:?}, info: {:?}, set_default: {:?}, defval: {:?}, arrayoffset: {:?}, arrayinfo: {:?}, arrayfieldsize: {:?}, link_type: {:?} }}" , self . name , self . info , self . set_default , self . defval , self . arrayoffset , self . arrayinfo , self . arrayfieldsize , self . link_type)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PropertyInfo {
    pub name: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
    pub enum_table: *const QEnumLookup,
    pub realized_set_allowed: bool,
    pub print: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut Object,
            prop: *mut Property,
            dest: *mut ::std::os::raw::c_char,
            len: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_default_value:
        ::std::option::Option<unsafe extern "C" fn(op: *mut ObjectProperty, prop: *const Property)>,
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            oc: *mut ObjectClass,
            name: *const ::std::os::raw::c_char,
            prop: *mut Property,
        ) -> *mut ObjectProperty,
    >,
    pub get: ObjectPropertyAccessor,
    pub set: ObjectPropertyAccessor,
    pub release: ObjectPropertyRelease,
}
#[test]
fn bindgen_test_layout_PropertyInfo() {
    const UNINIT: ::std::mem::MaybeUninit<PropertyInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PropertyInfo>(),
        80usize,
        concat!("Size of: ", stringify!(PropertyInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<PropertyInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(PropertyInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyInfo),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enum_table) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyInfo),
            "::",
            stringify!(enum_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).realized_set_allowed) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyInfo),
            "::",
            stringify!(realized_set_allowed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).print) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyInfo),
            "::",
            stringify!(print)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_default_value) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyInfo),
            "::",
            stringify!(set_default_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyInfo),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyInfo),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyInfo),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyInfo),
            "::",
            stringify!(release)
        )
    );
}
impl Default for PropertyInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VMStateInfo {
    pub name: *const ::std::os::raw::c_char,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            f: *mut QEMUFile,
            pv: *mut ::std::os::raw::c_void,
            size: usize,
            field: *const VMStateField,
        ) -> ::std::os::raw::c_int,
    >,
    pub put: ::std::option::Option<
        unsafe extern "C" fn(
            f: *mut QEMUFile,
            pv: *mut ::std::os::raw::c_void,
            size: usize,
            field: *const VMStateField,
            vmdesc: *mut JSONWriter,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_VMStateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VMStateInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VMStateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VMStateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VMStateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VMStateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateInfo),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateInfo),
            "::",
            stringify!(put)
        )
    );
}
impl Default for VMStateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VMStateFlags_VMS_SINGLE: VMStateFlags = VMStateFlags(1);
pub const VMStateFlags_VMS_POINTER: VMStateFlags = VMStateFlags(2);
pub const VMStateFlags_VMS_ARRAY: VMStateFlags = VMStateFlags(4);
pub const VMStateFlags_VMS_STRUCT: VMStateFlags = VMStateFlags(8);
pub const VMStateFlags_VMS_VARRAY_INT32: VMStateFlags = VMStateFlags(16);
pub const VMStateFlags_VMS_BUFFER: VMStateFlags = VMStateFlags(32);
pub const VMStateFlags_VMS_ARRAY_OF_POINTER: VMStateFlags = VMStateFlags(64);
pub const VMStateFlags_VMS_VARRAY_UINT16: VMStateFlags = VMStateFlags(128);
pub const VMStateFlags_VMS_VBUFFER: VMStateFlags = VMStateFlags(256);
pub const VMStateFlags_VMS_MULTIPLY: VMStateFlags = VMStateFlags(512);
pub const VMStateFlags_VMS_VARRAY_UINT8: VMStateFlags = VMStateFlags(1024);
pub const VMStateFlags_VMS_VARRAY_UINT32: VMStateFlags = VMStateFlags(2048);
pub const VMStateFlags_VMS_MUST_EXIST: VMStateFlags = VMStateFlags(4096);
pub const VMStateFlags_VMS_ALLOC: VMStateFlags = VMStateFlags(8192);
pub const VMStateFlags_VMS_MULTIPLY_ELEMENTS: VMStateFlags = VMStateFlags(16384);
pub const VMStateFlags_VMS_VSTRUCT: VMStateFlags = VMStateFlags(32768);
pub const VMStateFlags_VMS_END: VMStateFlags = VMStateFlags(65536);
impl ::std::ops::BitOr<VMStateFlags> for VMStateFlags {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        VMStateFlags(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for VMStateFlags {
    #[inline]
    fn bitor_assign(&mut self, rhs: VMStateFlags) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<VMStateFlags> for VMStateFlags {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        VMStateFlags(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for VMStateFlags {
    #[inline]
    fn bitand_assign(&mut self, rhs: VMStateFlags) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct VMStateFlags(pub ::std::os::raw::c_uint);
pub const MigrationPriority_MIG_PRI_DEFAULT: MigrationPriority = MigrationPriority(0);
pub const MigrationPriority_MIG_PRI_IOMMU: MigrationPriority = MigrationPriority(1);
pub const MigrationPriority_MIG_PRI_PCI_BUS: MigrationPriority = MigrationPriority(2);
pub const MigrationPriority_MIG_PRI_VIRTIO_MEM: MigrationPriority = MigrationPriority(3);
pub const MigrationPriority_MIG_PRI_GICV3_ITS: MigrationPriority = MigrationPriority(4);
pub const MigrationPriority_MIG_PRI_GICV3: MigrationPriority = MigrationPriority(5);
pub const MigrationPriority_MIG_PRI_MAX: MigrationPriority = MigrationPriority(6);
impl ::std::ops::BitOr<MigrationPriority> for MigrationPriority {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        MigrationPriority(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for MigrationPriority {
    #[inline]
    fn bitor_assign(&mut self, rhs: MigrationPriority) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<MigrationPriority> for MigrationPriority {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        MigrationPriority(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for MigrationPriority {
    #[inline]
    fn bitand_assign(&mut self, rhs: MigrationPriority) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct MigrationPriority(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VMStateField {
    pub name: *const ::std::os::raw::c_char,
    pub err_hint: *const ::std::os::raw::c_char,
    pub offset: usize,
    pub size: usize,
    pub start: usize,
    pub num: ::std::os::raw::c_int,
    pub num_offset: usize,
    pub size_offset: usize,
    pub info: *const VMStateInfo,
    pub flags: VMStateFlags,
    pub vmsd: *const VMStateDescription,
    pub version_id: ::std::os::raw::c_int,
    pub struct_version_id: ::std::os::raw::c_int,
    pub field_exists: ::std::option::Option<
        unsafe extern "C" fn(
            opaque: *mut ::std::os::raw::c_void,
            version_id: ::std::os::raw::c_int,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_VMStateField() {
    const UNINIT: ::std::mem::MaybeUninit<VMStateField> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VMStateField>(),
        104usize,
        concat!("Size of: ", stringify!(VMStateField))
    );
    assert_eq!(
        ::std::mem::align_of::<VMStateField>(),
        8usize,
        concat!("Alignment of ", stringify!(VMStateField))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateField),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_hint) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateField),
            "::",
            stringify!(err_hint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateField),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateField),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateField),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateField),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_offset) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateField),
            "::",
            stringify!(num_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size_offset) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateField),
            "::",
            stringify!(size_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateField),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateField),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vmsd) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateField),
            "::",
            stringify!(vmsd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version_id) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateField),
            "::",
            stringify!(version_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_version_id) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateField),
            "::",
            stringify!(struct_version_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_exists) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateField),
            "::",
            stringify!(field_exists)
        )
    );
}
impl Default for VMStateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VMStateDescription {
    pub name: *const ::std::os::raw::c_char,
    pub unmigratable: bool,
    pub early_setup: bool,
    pub version_id: ::std::os::raw::c_int,
    pub minimum_version_id: ::std::os::raw::c_int,
    pub priority: MigrationPriority,
    pub pre_load: ::std::option::Option<
        unsafe extern "C" fn(opaque: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub post_load: ::std::option::Option<
        unsafe extern "C" fn(
            opaque: *mut ::std::os::raw::c_void,
            version_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub pre_save: ::std::option::Option<
        unsafe extern "C" fn(opaque: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub post_save: ::std::option::Option<
        unsafe extern "C" fn(opaque: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub needed:
        ::std::option::Option<unsafe extern "C" fn(opaque: *mut ::std::os::raw::c_void) -> bool>,
    pub dev_unplug_pending:
        ::std::option::Option<unsafe extern "C" fn(opaque: *mut ::std::os::raw::c_void) -> bool>,
    pub fields: *const VMStateField,
    pub subsections: *mut *const VMStateDescription,
}
#[test]
fn bindgen_test_layout_VMStateDescription() {
    const UNINIT: ::std::mem::MaybeUninit<VMStateDescription> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VMStateDescription>(),
        88usize,
        concat!("Size of: ", stringify!(VMStateDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<VMStateDescription>(),
        8usize,
        concat!("Alignment of ", stringify!(VMStateDescription))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateDescription),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unmigratable) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateDescription),
            "::",
            stringify!(unmigratable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).early_setup) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateDescription),
            "::",
            stringify!(early_setup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version_id) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateDescription),
            "::",
            stringify!(version_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minimum_version_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateDescription),
            "::",
            stringify!(minimum_version_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateDescription),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pre_load) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateDescription),
            "::",
            stringify!(pre_load)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).post_load) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateDescription),
            "::",
            stringify!(post_load)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pre_save) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateDescription),
            "::",
            stringify!(pre_save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).post_save) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateDescription),
            "::",
            stringify!(post_save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).needed) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateDescription),
            "::",
            stringify!(needed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_unplug_pending) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateDescription),
            "::",
            stringify!(dev_unplug_pending)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fields) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateDescription),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subsections) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VMStateDescription),
            "::",
            stringify!(subsections)
        )
    );
}
impl Default for VMStateDescription {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct EventNotifier {
    pub rfd: ::std::os::raw::c_int,
    pub wfd: ::std::os::raw::c_int,
    pub initialized: bool,
}
#[test]
fn bindgen_test_layout_EventNotifier() {
    const UNINIT: ::std::mem::MaybeUninit<EventNotifier> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<EventNotifier>(),
        12usize,
        concat!("Size of: ", stringify!(EventNotifier))
    );
    assert_eq!(
        ::std::mem::align_of::<EventNotifier>(),
        4usize,
        concat!("Alignment of ", stringify!(EventNotifier))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rfd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EventNotifier),
            "::",
            stringify!(rfd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wfd) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(EventNotifier),
            "::",
            stringify!(wfd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialized) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EventNotifier),
            "::",
            stringify!(initialized)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SysemuCPUOps {
    #[doc = " @get_memory_mapping: Callback for obtaining the memory mappings."]
    pub get_memory_mapping: ::std::option::Option<
        unsafe extern "C" fn(
            cpu: *mut CPUState,
            list: *mut MemoryMappingList,
            errp: *mut *mut Error,
        ),
    >,
    #[doc = " @get_paging_enabled: Callback for inquiring whether paging is enabled."]
    pub get_paging_enabled:
        ::std::option::Option<unsafe extern "C" fn(cpu: *const CPUState) -> bool>,
    #[doc = " @get_phys_page_debug: Callback for obtaining a physical address."]
    pub get_phys_page_debug:
        ::std::option::Option<unsafe extern "C" fn(cpu: *mut CPUState, addr: vaddr) -> hwaddr>,
    #[doc = " @get_phys_page_attrs_debug: Callback for obtaining a physical address\n       and the associated memory transaction attributes to use for the\n       access.\n CPUs which use memory transaction attributes should implement this\n instead of get_phys_page_debug."]
    pub get_phys_page_attrs_debug: ::std::option::Option<
        unsafe extern "C" fn(cpu: *mut CPUState, addr: vaddr, attrs: *mut MemTxAttrs) -> hwaddr,
    >,
    #[doc = " @asidx_from_attrs: Callback to return the CPU AddressSpace to use for\n       a memory access with the specified memory transaction attributes."]
    pub asidx_from_attrs: ::std::option::Option<
        unsafe extern "C" fn(cpu: *mut CPUState, attrs: MemTxAttrs) -> ::std::os::raw::c_int,
    >,
    #[doc = " @get_crash_info: Callback for reporting guest crash information in\n GUEST_PANICKED events."]
    pub get_crash_info: ::std::option::Option<
        unsafe extern "C" fn(cpu: *mut CPUState) -> *mut GuestPanicInformation,
    >,
    #[doc = " @write_elf32_note: Callback for writing a CPU-specific ELF note to a\n 32-bit VM coredump."]
    pub write_elf32_note: ::std::option::Option<
        unsafe extern "C" fn(
            f: WriteCoreDumpFunction,
            cpu: *mut CPUState,
            cpuid: ::std::os::raw::c_int,
            s: *mut DumpState,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " @write_elf64_note: Callback for writing a CPU-specific ELF note to a\n 64-bit VM coredump."]
    pub write_elf64_note: ::std::option::Option<
        unsafe extern "C" fn(
            f: WriteCoreDumpFunction,
            cpu: *mut CPUState,
            cpuid: ::std::os::raw::c_int,
            s: *mut DumpState,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " @write_elf32_qemunote: Callback for writing a CPU- and QEMU-specific ELF\n note to a 32-bit VM coredump."]
    pub write_elf32_qemunote: ::std::option::Option<
        unsafe extern "C" fn(
            f: WriteCoreDumpFunction,
            cpu: *mut CPUState,
            s: *mut DumpState,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " @write_elf64_qemunote: Callback for writing a CPU- and QEMU-specific ELF\n note to a 64-bit VM coredump."]
    pub write_elf64_qemunote: ::std::option::Option<
        unsafe extern "C" fn(
            f: WriteCoreDumpFunction,
            cpu: *mut CPUState,
            s: *mut DumpState,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " @virtio_is_big_endian: Callback to return %true if a CPU which supports\n runtime configurable endianness is currently big-endian.\n Non-configurable CPUs can use the default implementation of this method.\n This method should not be used by any callers other than the pre-1.0\n virtio devices."]
    pub virtio_is_big_endian:
        ::std::option::Option<unsafe extern "C" fn(cpu: *mut CPUState) -> bool>,
    #[doc = " @legacy_vmsd: Legacy state for migration.\n               Do not use in new targets, use #DeviceClass::vmsd instead."]
    pub legacy_vmsd: *const VMStateDescription,
}
#[test]
fn bindgen_test_layout_SysemuCPUOps() {
    const UNINIT: ::std::mem::MaybeUninit<SysemuCPUOps> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SysemuCPUOps>(),
        96usize,
        concat!("Size of: ", stringify!(SysemuCPUOps))
    );
    assert_eq!(
        ::std::mem::align_of::<SysemuCPUOps>(),
        8usize,
        concat!("Alignment of ", stringify!(SysemuCPUOps))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_memory_mapping) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SysemuCPUOps),
            "::",
            stringify!(get_memory_mapping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_paging_enabled) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SysemuCPUOps),
            "::",
            stringify!(get_paging_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_phys_page_debug) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SysemuCPUOps),
            "::",
            stringify!(get_phys_page_debug)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_phys_page_attrs_debug) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SysemuCPUOps),
            "::",
            stringify!(get_phys_page_attrs_debug)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asidx_from_attrs) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SysemuCPUOps),
            "::",
            stringify!(asidx_from_attrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_crash_info) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SysemuCPUOps),
            "::",
            stringify!(get_crash_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_elf32_note) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SysemuCPUOps),
            "::",
            stringify!(write_elf32_note)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_elf64_note) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SysemuCPUOps),
            "::",
            stringify!(write_elf64_note)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_elf32_qemunote) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SysemuCPUOps),
            "::",
            stringify!(write_elf32_qemunote)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_elf64_qemunote) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SysemuCPUOps),
            "::",
            stringify!(write_elf64_qemunote)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).virtio_is_big_endian) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SysemuCPUOps),
            "::",
            stringify!(virtio_is_big_endian)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).legacy_vmsd) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SysemuCPUOps),
            "::",
            stringify!(legacy_vmsd)
        )
    );
}
impl Default for SysemuCPUOps {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const MemOp_MO_8: MemOp = MemOp(0);
pub const MemOp_MO_16: MemOp = MemOp(1);
pub const MemOp_MO_32: MemOp = MemOp(2);
pub const MemOp_MO_64: MemOp = MemOp(3);
pub const MemOp_MO_128: MemOp = MemOp(4);
pub const MemOp_MO_256: MemOp = MemOp(5);
pub const MemOp_MO_512: MemOp = MemOp(6);
pub const MemOp_MO_1024: MemOp = MemOp(7);
pub const MemOp_MO_SIZE: MemOp = MemOp(7);
pub const MemOp_MO_SIGN: MemOp = MemOp(8);
pub const MemOp_MO_BSWAP: MemOp = MemOp(16);
pub const MemOp_MO_LE: MemOp = MemOp(0);
pub const MemOp_MO_BE: MemOp = MemOp(16);
pub const MemOp_MO_TE: MemOp = MemOp(0);
pub const MemOp_MO_ASHIFT: MemOp = MemOp(5);
pub const MemOp_MO_AMASK: MemOp = MemOp(224);
pub const MemOp_MO_UNALN: MemOp = MemOp(0);
pub const MemOp_MO_ALIGN_2: MemOp = MemOp(32);
pub const MemOp_MO_ALIGN_4: MemOp = MemOp(64);
pub const MemOp_MO_ALIGN_8: MemOp = MemOp(96);
pub const MemOp_MO_ALIGN_16: MemOp = MemOp(128);
pub const MemOp_MO_ALIGN_32: MemOp = MemOp(160);
pub const MemOp_MO_ALIGN_64: MemOp = MemOp(192);
pub const MemOp_MO_ALIGN: MemOp = MemOp(224);
pub const MemOp_MO_ATOM_SHIFT: MemOp = MemOp(8);
pub const MemOp_MO_ATOM_IFALIGN: MemOp = MemOp(0);
pub const MemOp_MO_ATOM_IFALIGN_PAIR: MemOp = MemOp(256);
pub const MemOp_MO_ATOM_WITHIN16: MemOp = MemOp(512);
pub const MemOp_MO_ATOM_WITHIN16_PAIR: MemOp = MemOp(768);
pub const MemOp_MO_ATOM_SUBALIGN: MemOp = MemOp(1024);
pub const MemOp_MO_ATOM_NONE: MemOp = MemOp(1280);
pub const MemOp_MO_ATOM_MASK: MemOp = MemOp(1792);
pub const MemOp_MO_UB: MemOp = MemOp(0);
pub const MemOp_MO_UW: MemOp = MemOp(1);
pub const MemOp_MO_UL: MemOp = MemOp(2);
pub const MemOp_MO_UQ: MemOp = MemOp(3);
pub const MemOp_MO_UO: MemOp = MemOp(4);
pub const MemOp_MO_SB: MemOp = MemOp(8);
pub const MemOp_MO_SW: MemOp = MemOp(9);
pub const MemOp_MO_SL: MemOp = MemOp(10);
pub const MemOp_MO_SQ: MemOp = MemOp(11);
pub const MemOp_MO_SO: MemOp = MemOp(12);
pub const MemOp_MO_LEUW: MemOp = MemOp(1);
pub const MemOp_MO_LEUL: MemOp = MemOp(2);
pub const MemOp_MO_LEUQ: MemOp = MemOp(3);
pub const MemOp_MO_LESW: MemOp = MemOp(9);
pub const MemOp_MO_LESL: MemOp = MemOp(10);
pub const MemOp_MO_LESQ: MemOp = MemOp(11);
pub const MemOp_MO_BEUW: MemOp = MemOp(17);
pub const MemOp_MO_BEUL: MemOp = MemOp(18);
pub const MemOp_MO_BEUQ: MemOp = MemOp(19);
pub const MemOp_MO_BESW: MemOp = MemOp(25);
pub const MemOp_MO_BESL: MemOp = MemOp(26);
pub const MemOp_MO_BESQ: MemOp = MemOp(27);
pub const MemOp_MO_TEUW: MemOp = MemOp(1);
pub const MemOp_MO_TEUL: MemOp = MemOp(2);
pub const MemOp_MO_TEUQ: MemOp = MemOp(3);
pub const MemOp_MO_TEUO: MemOp = MemOp(4);
pub const MemOp_MO_TESW: MemOp = MemOp(9);
pub const MemOp_MO_TESL: MemOp = MemOp(10);
pub const MemOp_MO_TESQ: MemOp = MemOp(11);
pub const MemOp_MO_SSIZE: MemOp = MemOp(15);
impl ::std::ops::BitOr<MemOp> for MemOp {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        MemOp(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for MemOp {
    #[inline]
    fn bitor_assign(&mut self, rhs: MemOp) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<MemOp> for MemOp {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        MemOp(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for MemOp {
    #[inline]
    fn bitand_assign(&mut self, rhs: MemOp) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct MemOp(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RamDiscardManager {
    _unused: [u8; 0],
}
#[doc = " struct MemoryRegionSection: describes a fragment of a #MemoryRegion\n\n @mr: the region, or %NULL if empty\n @fv: the flat view of the address space the region is mapped in\n @offset_within_region: the beginning of the section, relative to @mr's start\n @size: the size of the section; will not exceed @mr's boundaries\n @offset_within_address_space: the address of the first byte of the section\n     relative to the region's address space\n @readonly: writes to this section are ignored\n @nonvolatile: this section is non-volatile"]
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct MemoryRegionSection {
    pub size: Int128,
    pub mr: *mut MemoryRegion,
    pub fv: *mut FlatView,
    pub offset_within_region: hwaddr,
    pub offset_within_address_space: hwaddr,
    pub readonly: bool,
    pub nonvolatile: bool,
}
#[test]
fn bindgen_test_layout_MemoryRegionSection() {
    const UNINIT: ::std::mem::MaybeUninit<MemoryRegionSection> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MemoryRegionSection>(),
        64usize,
        concat!("Size of: ", stringify!(MemoryRegionSection))
    );
    assert_eq!(
        ::std::mem::align_of::<MemoryRegionSection>(),
        16usize,
        concat!("Alignment of ", stringify!(MemoryRegionSection))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegionSection),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegionSection),
            "::",
            stringify!(mr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fv) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegionSection),
            "::",
            stringify!(fv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset_within_region) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegionSection),
            "::",
            stringify!(offset_within_region)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset_within_address_space) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegionSection),
            "::",
            stringify!(offset_within_address_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readonly) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegionSection),
            "::",
            stringify!(readonly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nonvolatile) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegionSection),
            "::",
            stringify!(nonvolatile)
        )
    );
}
impl Default for MemoryRegionSection {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemoryRegionOps {
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            opaque: *mut ::std::os::raw::c_void,
            addr: hwaddr,
            size: ::std::os::raw::c_uint,
        ) -> u64,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            opaque: *mut ::std::os::raw::c_void,
            addr: hwaddr,
            data: u64,
            size: ::std::os::raw::c_uint,
        ),
    >,
    pub read_with_attrs: ::std::option::Option<
        unsafe extern "C" fn(
            opaque: *mut ::std::os::raw::c_void,
            addr: hwaddr,
            data: *mut u64,
            size: ::std::os::raw::c_uint,
            attrs: MemTxAttrs,
        ) -> MemTxResult,
    >,
    pub write_with_attrs: ::std::option::Option<
        unsafe extern "C" fn(
            opaque: *mut ::std::os::raw::c_void,
            addr: hwaddr,
            data: u64,
            size: ::std::os::raw::c_uint,
            attrs: MemTxAttrs,
        ) -> MemTxResult,
    >,
    pub endianness: device_endian,
    pub valid: MemoryRegionOps__bindgen_ty_1,
    pub impl_: MemoryRegionOps__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct MemoryRegionOps__bindgen_ty_1 {
    pub min_access_size: ::std::os::raw::c_uint,
    pub max_access_size: ::std::os::raw::c_uint,
    pub unaligned: bool,
    pub accepts: ::std::option::Option<
        unsafe extern "C" fn(
            opaque: *mut ::std::os::raw::c_void,
            addr: hwaddr,
            size: ::std::os::raw::c_uint,
            is_write: bool,
            attrs: MemTxAttrs,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_MemoryRegionOps__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<MemoryRegionOps__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MemoryRegionOps__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(MemoryRegionOps__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<MemoryRegionOps__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(MemoryRegionOps__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_access_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegionOps__bindgen_ty_1),
            "::",
            stringify!(min_access_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_access_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegionOps__bindgen_ty_1),
            "::",
            stringify!(max_access_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unaligned) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegionOps__bindgen_ty_1),
            "::",
            stringify!(unaligned)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accepts) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegionOps__bindgen_ty_1),
            "::",
            stringify!(accepts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct MemoryRegionOps__bindgen_ty_2 {
    pub min_access_size: ::std::os::raw::c_uint,
    pub max_access_size: ::std::os::raw::c_uint,
    pub unaligned: bool,
}
#[test]
fn bindgen_test_layout_MemoryRegionOps__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<MemoryRegionOps__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MemoryRegionOps__bindgen_ty_2>(),
        12usize,
        concat!("Size of: ", stringify!(MemoryRegionOps__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<MemoryRegionOps__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(MemoryRegionOps__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_access_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegionOps__bindgen_ty_2),
            "::",
            stringify!(min_access_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_access_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegionOps__bindgen_ty_2),
            "::",
            stringify!(max_access_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unaligned) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegionOps__bindgen_ty_2),
            "::",
            stringify!(unaligned)
        )
    );
}
#[test]
fn bindgen_test_layout_MemoryRegionOps() {
    const UNINIT: ::std::mem::MaybeUninit<MemoryRegionOps> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MemoryRegionOps>(),
        80usize,
        concat!("Size of: ", stringify!(MemoryRegionOps))
    );
    assert_eq!(
        ::std::mem::align_of::<MemoryRegionOps>(),
        8usize,
        concat!("Alignment of ", stringify!(MemoryRegionOps))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegionOps),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegionOps),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_with_attrs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegionOps),
            "::",
            stringify!(read_with_attrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_with_attrs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegionOps),
            "::",
            stringify!(write_with_attrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endianness) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegionOps),
            "::",
            stringify!(endianness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valid) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegionOps),
            "::",
            stringify!(valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).impl_) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegionOps),
            "::",
            stringify!(impl_)
        )
    );
}
impl Default for MemoryRegionOps {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CoalescedMemoryRange {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemoryRegionIoeventfd {
    _unused: [u8; 0],
}
#[doc = " MemoryRegion:\n\n A struct representing a memory region."]
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct MemoryRegion {
    pub parent_obj: Object,
    pub romd_mode: bool,
    pub ram: bool,
    pub subpage: bool,
    pub readonly: bool,
    pub nonvolatile: bool,
    pub rom_device: bool,
    pub flush_coalesced_mmio: bool,
    pub dirty_log_mask: u8,
    pub is_iommu: bool,
    pub ram_block: *mut RAMBlock,
    pub owner: *mut Object,
    pub dev: *mut DeviceState,
    pub ops: *const MemoryRegionOps,
    pub opaque: *mut ::std::os::raw::c_void,
    pub container: *mut MemoryRegion,
    pub mapped_via_alias: ::std::os::raw::c_int,
    pub __bindgen_padding_0: [u64; 0usize],
    pub size: Int128,
    pub addr: hwaddr,
    pub destructor: ::std::option::Option<unsafe extern "C" fn(mr: *mut MemoryRegion)>,
    pub align: u64,
    pub terminates: bool,
    pub ram_device: bool,
    pub enabled: bool,
    pub warning_printed: bool,
    pub vga_logging_count: u8,
    pub alias: *mut MemoryRegion,
    pub alias_offset: hwaddr,
    pub priority: i32,
    pub subregions: MemoryRegion__bindgen_ty_1,
    pub subregions_link: MemoryRegion__bindgen_ty_2,
    pub coalesced: MemoryRegion__bindgen_ty_3,
    pub name: *const ::std::os::raw::c_char,
    pub ioeventfd_nb: ::std::os::raw::c_uint,
    pub ioeventfds: *mut MemoryRegionIoeventfd,
    pub rdm: *mut RamDiscardManager,
    pub disable_reentrancy_guard: bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MemoryRegion__bindgen_ty_1 {
    pub tqh_first: *mut MemoryRegion,
    pub tqh_circ: QTailQLink,
}
#[test]
fn bindgen_test_layout_MemoryRegion__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<MemoryRegion__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MemoryRegion__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(MemoryRegion__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<MemoryRegion__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(MemoryRegion__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqh_first) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion__bindgen_ty_1),
            "::",
            stringify!(tqh_first)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqh_circ) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion__bindgen_ty_1),
            "::",
            stringify!(tqh_circ)
        )
    );
}
impl Default for MemoryRegion__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for MemoryRegion__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "MemoryRegion__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MemoryRegion__bindgen_ty_2 {
    pub tqe_next: *mut MemoryRegion,
    pub tqe_circ: QTailQLink,
}
#[test]
fn bindgen_test_layout_MemoryRegion__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<MemoryRegion__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MemoryRegion__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(MemoryRegion__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<MemoryRegion__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(MemoryRegion__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqe_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion__bindgen_ty_2),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqe_circ) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion__bindgen_ty_2),
            "::",
            stringify!(tqe_circ)
        )
    );
}
impl Default for MemoryRegion__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for MemoryRegion__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "MemoryRegion__bindgen_ty_2 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MemoryRegion__bindgen_ty_3 {
    pub tqh_first: *mut CoalescedMemoryRange,
    pub tqh_circ: QTailQLink,
}
#[test]
fn bindgen_test_layout_MemoryRegion__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<MemoryRegion__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MemoryRegion__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(MemoryRegion__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<MemoryRegion__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(MemoryRegion__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqh_first) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion__bindgen_ty_3),
            "::",
            stringify!(tqh_first)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqh_circ) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion__bindgen_ty_3),
            "::",
            stringify!(tqh_circ)
        )
    );
}
impl Default for MemoryRegion__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for MemoryRegion__bindgen_ty_3 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "MemoryRegion__bindgen_ty_3 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_MemoryRegion() {
    const UNINIT: ::std::mem::MaybeUninit<MemoryRegion> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MemoryRegion>(),
        272usize,
        concat!("Size of: ", stringify!(MemoryRegion))
    );
    assert_eq!(
        ::std::mem::align_of::<MemoryRegion>(),
        16usize,
        concat!("Alignment of ", stringify!(MemoryRegion))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent_obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(parent_obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).romd_mode) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(romd_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ram) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(ram)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subpage) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(subpage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readonly) as usize - ptr as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(readonly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nonvolatile) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(nonvolatile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rom_device) as usize - ptr as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(rom_device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flush_coalesced_mmio) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(flush_coalesced_mmio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dirty_log_mask) as usize - ptr as usize },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(dirty_log_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_iommu) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(is_iommu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ram_block) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(ram_block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owner) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ops) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(ops)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(opaque)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).container) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(container)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mapped_via_alias) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(mapped_via_alias)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destructor) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(destructor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(align)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).terminates) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(terminates)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ram_device) as usize - ptr as usize },
        153usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(ram_device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabled) as usize - ptr as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).warning_printed) as usize - ptr as usize },
        155usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(warning_printed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vga_logging_count) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(vga_logging_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alias) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alias_offset) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(alias_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subregions) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(subregions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subregions_link) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(subregions_link)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coalesced) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(coalesced)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ioeventfd_nb) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(ioeventfd_nb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ioeventfds) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(ioeventfds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdm) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(rdm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disable_reentrancy_guard) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryRegion),
            "::",
            stringify!(disable_reentrancy_guard)
        )
    );
}
impl Default for MemoryRegion {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for MemoryRegion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "MemoryRegion {{ parent_obj: {:?}, romd_mode: {:?}, ram: {:?}, subpage: {:?}, readonly: {:?}, nonvolatile: {:?}, rom_device: {:?}, flush_coalesced_mmio: {:?}, is_iommu: {:?}, ram_block: {:?}, owner: {:?}, dev: {:?}, ops: {:?}, opaque: {:?}, container: {:?}, mapped_via_alias: {:?}, size: {:?}, destructor: {:?}, terminates: {:?}, ram_device: {:?}, enabled: {:?}, warning_printed: {:?}, alias: {:?}, subregions: {:?}, subregions_link: {:?}, coalesced: {:?}, name: {:?}, ioeventfd_nb: {:?}, ioeventfds: {:?}, rdm: {:?}, disable_reentrancy_guard: {:?} }}" , self . parent_obj , self . romd_mode , self . ram , self . subpage , self . readonly , self . nonvolatile , self . rom_device , self . flush_coalesced_mmio , self . is_iommu , self . ram_block , self . owner , self . dev , self . ops , self . opaque , self . container , self . mapped_via_alias , self . size , self . destructor , self . terminates , self . ram_device , self . enabled , self . warning_printed , self . alias , self . subregions , self . subregions_link , self . coalesced , self . name , self . ioeventfd_nb , self . ioeventfds , self . rdm , self . disable_reentrancy_guard)
    }
}
#[doc = " struct MemoryListener: callbacks structure for updates to the physical memory map\n\n Allows a component to adjust to changes in the guest-visible memory map.\n Use with memory_listener_register() and memory_listener_unregister()."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MemoryListener {
    #[doc = " @begin:\n\n Called at the beginning of an address space update transaction.\n Followed by calls to #MemoryListener.region_add(),\n #MemoryListener.region_del(), #MemoryListener.region_nop(),\n #MemoryListener.log_start() and #MemoryListener.log_stop() in\n increasing address order.\n\n @listener: The #MemoryListener."]
    pub begin: ::std::option::Option<unsafe extern "C" fn(listener: *mut MemoryListener)>,
    #[doc = " @commit:\n\n Called at the end of an address space update transaction,\n after the last call to #MemoryListener.region_add(),\n #MemoryListener.region_del() or #MemoryListener.region_nop(),\n #MemoryListener.log_start() and #MemoryListener.log_stop().\n\n @listener: The #MemoryListener."]
    pub commit: ::std::option::Option<unsafe extern "C" fn(listener: *mut MemoryListener)>,
    #[doc = " @region_add:\n\n Called during an address space update transaction,\n for a section of the address space that is new in this address space\n space since the last transaction.\n\n @listener: The #MemoryListener.\n @section: The new #MemoryRegionSection."]
    pub region_add: ::std::option::Option<
        unsafe extern "C" fn(listener: *mut MemoryListener, section: *mut MemoryRegionSection),
    >,
    #[doc = " @region_del:\n\n Called during an address space update transaction,\n for a section of the address space that has disappeared in the address\n space since the last transaction.\n\n @listener: The #MemoryListener.\n @section: The old #MemoryRegionSection."]
    pub region_del: ::std::option::Option<
        unsafe extern "C" fn(listener: *mut MemoryListener, section: *mut MemoryRegionSection),
    >,
    #[doc = " @region_nop:\n\n Called during an address space update transaction,\n for a section of the address space that is in the same place in the address\n space as in the last transaction.\n\n @listener: The #MemoryListener.\n @section: The #MemoryRegionSection."]
    pub region_nop: ::std::option::Option<
        unsafe extern "C" fn(listener: *mut MemoryListener, section: *mut MemoryRegionSection),
    >,
    #[doc = " @log_start:\n\n Called during an address space update transaction, after\n one of #MemoryListener.region_add(), #MemoryListener.region_del() or\n #MemoryListener.region_nop(), if dirty memory logging clients have\n become active since the last transaction.\n\n @listener: The #MemoryListener.\n @section: The #MemoryRegionSection.\n @old: A bitmap of dirty memory logging clients that were active in\n the previous transaction.\n @new: A bitmap of dirty memory logging clients that are active in\n the current transaction."]
    pub log_start: ::std::option::Option<
        unsafe extern "C" fn(
            listener: *mut MemoryListener,
            section: *mut MemoryRegionSection,
            old: ::std::os::raw::c_int,
            new: ::std::os::raw::c_int,
        ),
    >,
    #[doc = " @log_stop:\n\n Called during an address space update transaction, after\n one of #MemoryListener.region_add(), #MemoryListener.region_del() or\n #MemoryListener.region_nop() and possibly after\n #MemoryListener.log_start(), if dirty memory logging clients have\n become inactive since the last transaction.\n\n @listener: The #MemoryListener.\n @section: The #MemoryRegionSection.\n @old: A bitmap of dirty memory logging clients that were active in\n the previous transaction.\n @new: A bitmap of dirty memory logging clients that are active in\n the current transaction."]
    pub log_stop: ::std::option::Option<
        unsafe extern "C" fn(
            listener: *mut MemoryListener,
            section: *mut MemoryRegionSection,
            old: ::std::os::raw::c_int,
            new: ::std::os::raw::c_int,
        ),
    >,
    #[doc = " @log_sync:\n\n Called by memory_region_snapshot_and_clear_dirty() and\n memory_global_dirty_log_sync(), before accessing QEMU's \"official\"\n copy of the dirty memory bitmap for a #MemoryRegionSection.\n\n @listener: The #MemoryListener.\n @section: The #MemoryRegionSection."]
    pub log_sync: ::std::option::Option<
        unsafe extern "C" fn(listener: *mut MemoryListener, section: *mut MemoryRegionSection),
    >,
    #[doc = " @log_sync_global:\n\n This is the global version of @log_sync when the listener does\n not have a way to synchronize the log with finer granularity.\n When the listener registers with @log_sync_global defined, then\n its @log_sync must be NULL.  Vice versa.\n\n @listener: The #MemoryListener.\n @last_stage: The last stage to synchronize the log during migration.\n The caller should gurantee that the synchronization with true for\n @last_stage is triggered for once after all VCPUs have been stopped."]
    pub log_sync_global: ::std::option::Option<
        unsafe extern "C" fn(listener: *mut MemoryListener, last_stage: bool),
    >,
    #[doc = " @log_clear:\n\n Called before reading the dirty memory bitmap for a\n #MemoryRegionSection.\n\n @listener: The #MemoryListener.\n @section: The #MemoryRegionSection."]
    pub log_clear: ::std::option::Option<
        unsafe extern "C" fn(listener: *mut MemoryListener, section: *mut MemoryRegionSection),
    >,
    #[doc = " @log_global_start:\n\n Called by memory_global_dirty_log_start(), which\n enables the %DIRTY_LOG_MIGRATION client on all memory regions in\n the address space.  #MemoryListener.log_global_start() is also\n called when a #MemoryListener is added, if global dirty logging is\n active at that time.\n\n @listener: The #MemoryListener."]
    pub log_global_start:
        ::std::option::Option<unsafe extern "C" fn(listener: *mut MemoryListener)>,
    #[doc = " @log_global_stop:\n\n Called by memory_global_dirty_log_stop(), which\n disables the %DIRTY_LOG_MIGRATION client on all memory regions in\n the address space.\n\n @listener: The #MemoryListener."]
    pub log_global_stop: ::std::option::Option<unsafe extern "C" fn(listener: *mut MemoryListener)>,
    #[doc = " @log_global_after_sync:\n\n Called after reading the dirty memory bitmap\n for any #MemoryRegionSection.\n\n @listener: The #MemoryListener."]
    pub log_global_after_sync:
        ::std::option::Option<unsafe extern "C" fn(listener: *mut MemoryListener)>,
    #[doc = " @eventfd_add:\n\n Called during an address space update transaction,\n for a section of the address space that has had a new ioeventfd\n registration since the last transaction.\n\n @listener: The #MemoryListener.\n @section: The new #MemoryRegionSection.\n @match_data: The @match_data parameter for the new ioeventfd.\n @data: The @data parameter for the new ioeventfd.\n @e: The #EventNotifier parameter for the new ioeventfd."]
    pub eventfd_add: ::std::option::Option<
        unsafe extern "C" fn(
            listener: *mut MemoryListener,
            section: *mut MemoryRegionSection,
            match_data: bool,
            data: u64,
            e: *mut EventNotifier,
        ),
    >,
    #[doc = " @eventfd_del:\n\n Called during an address space update transaction,\n for a section of the address space that has dropped an ioeventfd\n registration since the last transaction.\n\n @listener: The #MemoryListener.\n @section: The new #MemoryRegionSection.\n @match_data: The @match_data parameter for the dropped ioeventfd.\n @data: The @data parameter for the dropped ioeventfd.\n @e: The #EventNotifier parameter for the dropped ioeventfd."]
    pub eventfd_del: ::std::option::Option<
        unsafe extern "C" fn(
            listener: *mut MemoryListener,
            section: *mut MemoryRegionSection,
            match_data: bool,
            data: u64,
            e: *mut EventNotifier,
        ),
    >,
    #[doc = " @coalesced_io_add:\n\n Called during an address space update transaction,\n for a section of the address space that has had a new coalesced\n MMIO range registration since the last transaction.\n\n @listener: The #MemoryListener.\n @section: The new #MemoryRegionSection.\n @addr: The starting address for the coalesced MMIO range.\n @len: The length of the coalesced MMIO range."]
    pub coalesced_io_add: ::std::option::Option<
        unsafe extern "C" fn(
            listener: *mut MemoryListener,
            section: *mut MemoryRegionSection,
            addr: hwaddr,
            len: hwaddr,
        ),
    >,
    #[doc = " @coalesced_io_del:\n\n Called during an address space update transaction,\n for a section of the address space that has dropped a coalesced\n MMIO range since the last transaction.\n\n @listener: The #MemoryListener.\n @section: The new #MemoryRegionSection.\n @addr: The starting address for the coalesced MMIO range.\n @len: The length of the coalesced MMIO range."]
    pub coalesced_io_del: ::std::option::Option<
        unsafe extern "C" fn(
            listener: *mut MemoryListener,
            section: *mut MemoryRegionSection,
            addr: hwaddr,
            len: hwaddr,
        ),
    >,
    #[doc = " @priority:\n\n Govern the order in which memory listeners are invoked. Lower priorities\n are invoked earlier for \"add\" or \"start\" callbacks, and later for \"delete\"\n or \"stop\" callbacks."]
    pub priority: ::std::os::raw::c_uint,
    #[doc = " @name:\n\n Name of the listener.  It can be used in contexts where we'd like to\n identify one memory listener with the rest."]
    pub name: *const ::std::os::raw::c_char,
    pub address_space: *mut AddressSpace,
    pub link: MemoryListener__bindgen_ty_1,
    pub link_as: MemoryListener__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MemoryListener__bindgen_ty_1 {
    pub tqe_next: *mut MemoryListener,
    pub tqe_circ: QTailQLink,
}
#[test]
fn bindgen_test_layout_MemoryListener__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<MemoryListener__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MemoryListener__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(MemoryListener__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<MemoryListener__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(MemoryListener__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqe_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener__bindgen_ty_1),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqe_circ) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener__bindgen_ty_1),
            "::",
            stringify!(tqe_circ)
        )
    );
}
impl Default for MemoryListener__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for MemoryListener__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "MemoryListener__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MemoryListener__bindgen_ty_2 {
    pub tqe_next: *mut MemoryListener,
    pub tqe_circ: QTailQLink,
}
#[test]
fn bindgen_test_layout_MemoryListener__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<MemoryListener__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MemoryListener__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(MemoryListener__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<MemoryListener__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(MemoryListener__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqe_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener__bindgen_ty_2),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqe_circ) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener__bindgen_ty_2),
            "::",
            stringify!(tqe_circ)
        )
    );
}
impl Default for MemoryListener__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for MemoryListener__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "MemoryListener__bindgen_ty_2 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_MemoryListener() {
    const UNINIT: ::std::mem::MaybeUninit<MemoryListener> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MemoryListener>(),
        192usize,
        concat!("Size of: ", stringify!(MemoryListener))
    );
    assert_eq!(
        ::std::mem::align_of::<MemoryListener>(),
        8usize,
        concat!("Alignment of ", stringify!(MemoryListener))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).begin) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener),
            "::",
            stringify!(begin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commit) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener),
            "::",
            stringify!(commit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).region_add) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener),
            "::",
            stringify!(region_add)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).region_del) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener),
            "::",
            stringify!(region_del)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).region_nop) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener),
            "::",
            stringify!(region_nop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_start) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener),
            "::",
            stringify!(log_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_stop) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener),
            "::",
            stringify!(log_stop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_sync) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener),
            "::",
            stringify!(log_sync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_sync_global) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener),
            "::",
            stringify!(log_sync_global)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_clear) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener),
            "::",
            stringify!(log_clear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_global_start) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener),
            "::",
            stringify!(log_global_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_global_stop) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener),
            "::",
            stringify!(log_global_stop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_global_after_sync) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener),
            "::",
            stringify!(log_global_after_sync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventfd_add) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener),
            "::",
            stringify!(eventfd_add)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventfd_del) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener),
            "::",
            stringify!(eventfd_del)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coalesced_io_add) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener),
            "::",
            stringify!(coalesced_io_add)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coalesced_io_del) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener),
            "::",
            stringify!(coalesced_io_del)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address_space) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener),
            "::",
            stringify!(address_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).link) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener),
            "::",
            stringify!(link)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).link_as) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryListener),
            "::",
            stringify!(link_as)
        )
    );
}
impl Default for MemoryListener {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for MemoryListener {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "MemoryListener {{ begin: {:?}, commit: {:?}, region_add: {:?}, region_del: {:?}, region_nop: {:?}, log_start: {:?}, log_stop: {:?}, log_sync: {:?}, log_sync_global: {:?}, log_clear: {:?}, log_global_start: {:?}, log_global_stop: {:?}, log_global_after_sync: {:?}, eventfd_add: {:?}, eventfd_del: {:?}, coalesced_io_add: {:?}, coalesced_io_del: {:?}, priority: {:?}, name: {:?}, address_space: {:?}, link: {:?}, link_as: {:?} }}" , self . begin , self . commit , self . region_add , self . region_del , self . region_nop , self . log_start , self . log_stop , self . log_sync , self . log_sync_global , self . log_clear , self . log_global_start , self . log_global_stop , self . log_global_after_sync , self . eventfd_add , self . eventfd_del , self . coalesced_io_add , self . coalesced_io_del , self . priority , self . name , self . address_space , self . link , self . link_as)
    }
}
#[doc = " struct AddressSpace: describes a mapping of addresses to #MemoryRegion objects"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AddressSpace {
    pub rcu: rcu_head,
    pub name: *mut ::std::os::raw::c_char,
    pub root: *mut MemoryRegion,
    pub current_map: *mut FlatView,
    pub ioeventfd_nb: ::std::os::raw::c_int,
    pub ioeventfds: *mut MemoryRegionIoeventfd,
    pub listeners: AddressSpace__bindgen_ty_1,
    pub address_spaces_link: AddressSpace__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union AddressSpace__bindgen_ty_1 {
    pub tqh_first: *mut MemoryListener,
    pub tqh_circ: QTailQLink,
}
#[test]
fn bindgen_test_layout_AddressSpace__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<AddressSpace__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<AddressSpace__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(AddressSpace__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<AddressSpace__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(AddressSpace__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqh_first) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AddressSpace__bindgen_ty_1),
            "::",
            stringify!(tqh_first)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqh_circ) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AddressSpace__bindgen_ty_1),
            "::",
            stringify!(tqh_circ)
        )
    );
}
impl Default for AddressSpace__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for AddressSpace__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "AddressSpace__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union AddressSpace__bindgen_ty_2 {
    pub tqe_next: *mut AddressSpace,
    pub tqe_circ: QTailQLink,
}
#[test]
fn bindgen_test_layout_AddressSpace__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<AddressSpace__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<AddressSpace__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(AddressSpace__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<AddressSpace__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(AddressSpace__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqe_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AddressSpace__bindgen_ty_2),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqe_circ) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AddressSpace__bindgen_ty_2),
            "::",
            stringify!(tqe_circ)
        )
    );
}
impl Default for AddressSpace__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for AddressSpace__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "AddressSpace__bindgen_ty_2 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_AddressSpace() {
    const UNINIT: ::std::mem::MaybeUninit<AddressSpace> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<AddressSpace>(),
        88usize,
        concat!("Size of: ", stringify!(AddressSpace))
    );
    assert_eq!(
        ::std::mem::align_of::<AddressSpace>(),
        8usize,
        concat!("Alignment of ", stringify!(AddressSpace))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rcu) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AddressSpace),
            "::",
            stringify!(rcu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AddressSpace),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AddressSpace),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_map) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AddressSpace),
            "::",
            stringify!(current_map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ioeventfd_nb) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(AddressSpace),
            "::",
            stringify!(ioeventfd_nb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ioeventfds) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(AddressSpace),
            "::",
            stringify!(ioeventfds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).listeners) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(AddressSpace),
            "::",
            stringify!(listeners)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address_spaces_link) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(AddressSpace),
            "::",
            stringify!(address_spaces_link)
        )
    );
}
impl Default for AddressSpace {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for AddressSpace {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "AddressSpace {{ rcu: {:?}, name: {:?}, root: {:?}, current_map: {:?}, ioeventfd_nb: {:?}, ioeventfds: {:?}, listeners: {:?}, address_spaces_link: {:?} }}" , self . rcu , self . name , self . root , self . current_map , self . ioeventfd_nb , self . ioeventfds , self . listeners , self . address_spaces_link)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AddressSpaceDispatch {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FlatRange {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FlatView {
    pub rcu: rcu_head,
    pub ref_: ::std::os::raw::c_uint,
    pub ranges: *mut FlatRange,
    pub nr: ::std::os::raw::c_uint,
    pub nr_allocated: ::std::os::raw::c_uint,
    pub dispatch: *mut AddressSpaceDispatch,
    pub root: *mut MemoryRegion,
}
#[test]
fn bindgen_test_layout_FlatView() {
    const UNINIT: ::std::mem::MaybeUninit<FlatView> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FlatView>(),
        56usize,
        concat!("Size of: ", stringify!(FlatView))
    );
    assert_eq!(
        ::std::mem::align_of::<FlatView>(),
        8usize,
        concat!("Alignment of ", stringify!(FlatView))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rcu) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FlatView),
            "::",
            stringify!(rcu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FlatView),
            "::",
            stringify!(ref_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ranges) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FlatView),
            "::",
            stringify!(ranges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FlatView),
            "::",
            stringify!(nr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nr_allocated) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FlatView),
            "::",
            stringify!(nr_allocated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dispatch) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FlatView),
            "::",
            stringify!(dispatch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FlatView),
            "::",
            stringify!(root)
        )
    );
}
impl Default for FlatView {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct device_save_state_s {
    pub kind: u8,
    pub save_buffer: *mut u8,
    pub save_buffer_size: usize,
}
#[test]
fn bindgen_test_layout_device_save_state_s() {
    const UNINIT: ::std::mem::MaybeUninit<device_save_state_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<device_save_state_s>(),
        24usize,
        concat!("Size of: ", stringify!(device_save_state_s))
    );
    assert_eq!(
        ::std::mem::align_of::<device_save_state_s>(),
        8usize,
        concat!("Alignment of ", stringify!(device_save_state_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(device_save_state_s),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_buffer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(device_save_state_s),
            "::",
            stringify!(save_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_buffer_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(device_save_state_s),
            "::",
            stringify!(save_buffer_size)
        )
    );
}
impl Default for device_save_state_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type device_save_state_t = device_save_state_s;
pub const device_snapshot_kind_e_DEVICE_SNAPSHOT_ALL: device_snapshot_kind_e =
    device_snapshot_kind_e(0);
pub const device_snapshot_kind_e_DEVICE_SNAPSHOT_ALLOWLIST: device_snapshot_kind_e =
    device_snapshot_kind_e(1);
pub const device_snapshot_kind_e_DEVICE_SNAPSHOT_DENYLIST: device_snapshot_kind_e =
    device_snapshot_kind_e(2);
impl ::std::ops::BitOr<device_snapshot_kind_e> for device_snapshot_kind_e {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        device_snapshot_kind_e(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for device_snapshot_kind_e {
    #[inline]
    fn bitor_assign(&mut self, rhs: device_snapshot_kind_e) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<device_snapshot_kind_e> for device_snapshot_kind_e {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        device_snapshot_kind_e(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for device_snapshot_kind_e {
    #[inline]
    fn bitand_assign(&mut self, rhs: device_snapshot_kind_e) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct device_snapshot_kind_e(pub ::std::os::raw::c_uint);
pub use self::device_snapshot_kind_e as device_snapshot_kind_t;
extern "C" {
    pub fn device_list_all() -> *mut *mut ::std::os::raw::c_char;
}
#[doc = " Saved ramblock"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syx_snapshot_ramblock_s {
    pub ram: *mut u8,
    pub used_length: u64,
    pub idstr: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_syx_snapshot_ramblock_s() {
    const UNINIT: ::std::mem::MaybeUninit<syx_snapshot_ramblock_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<syx_snapshot_ramblock_s>(),
        272usize,
        concat!("Size of: ", stringify!(syx_snapshot_ramblock_s))
    );
    assert_eq!(
        ::std::mem::align_of::<syx_snapshot_ramblock_s>(),
        8usize,
        concat!("Alignment of ", stringify!(syx_snapshot_ramblock_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ram) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(syx_snapshot_ramblock_s),
            "::",
            stringify!(ram)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used_length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(syx_snapshot_ramblock_s),
            "::",
            stringify!(used_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idstr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(syx_snapshot_ramblock_s),
            "::",
            stringify!(idstr)
        )
    );
}
impl Default for syx_snapshot_ramblock_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Saved ramblock"]
pub type syx_snapshot_ramblock_t = syx_snapshot_ramblock_s;
#[doc = " A root snapshot representation."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syx_snapshot_root_s {
    pub ram_blocks: *mut syx_snapshot_ramblock_t,
    pub nb_ram_blocks: u64,
    pub dss: *mut device_save_state_t,
}
#[test]
fn bindgen_test_layout_syx_snapshot_root_s() {
    const UNINIT: ::std::mem::MaybeUninit<syx_snapshot_root_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<syx_snapshot_root_s>(),
        24usize,
        concat!("Size of: ", stringify!(syx_snapshot_root_s))
    );
    assert_eq!(
        ::std::mem::align_of::<syx_snapshot_root_s>(),
        8usize,
        concat!("Alignment of ", stringify!(syx_snapshot_root_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ram_blocks) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(syx_snapshot_root_s),
            "::",
            stringify!(ram_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nb_ram_blocks) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(syx_snapshot_root_s),
            "::",
            stringify!(nb_ram_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dss) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(syx_snapshot_root_s),
            "::",
            stringify!(dss)
        )
    );
}
impl Default for syx_snapshot_root_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " A root snapshot representation."]
pub type syx_snapshot_root_t = syx_snapshot_root_s;
#[doc = " A snapshot's dirty list. It only stores dirty addresses\n (without data). It is the developer's responsibility to\n to effectively save dirty pages when it is necessary."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syx_snapshot_dirty_list_s {
    pub dirty_addr: *mut hwaddr,
    pub length: u64,
    pub capacity: u64,
}
#[test]
fn bindgen_test_layout_syx_snapshot_dirty_list_s() {
    const UNINIT: ::std::mem::MaybeUninit<syx_snapshot_dirty_list_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<syx_snapshot_dirty_list_s>(),
        24usize,
        concat!("Size of: ", stringify!(syx_snapshot_dirty_list_s))
    );
    assert_eq!(
        ::std::mem::align_of::<syx_snapshot_dirty_list_s>(),
        8usize,
        concat!("Alignment of ", stringify!(syx_snapshot_dirty_list_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dirty_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(syx_snapshot_dirty_list_s),
            "::",
            stringify!(dirty_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(syx_snapshot_dirty_list_s),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(syx_snapshot_dirty_list_s),
            "::",
            stringify!(capacity)
        )
    );
}
impl Default for syx_snapshot_dirty_list_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " A snapshot's dirty list. It only stores dirty addresses\n (without data). It is the developer's responsibility to\n to effectively save dirty pages when it is necessary."]
pub type syx_snapshot_dirty_list_t = syx_snapshot_dirty_list_s;
#[doc = " A list of dirty pages with their old data."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syx_snapshot_dirty_page_s {
    pub addr: hwaddr,
    pub data: *mut u8,
}
#[test]
fn bindgen_test_layout_syx_snapshot_dirty_page_s() {
    const UNINIT: ::std::mem::MaybeUninit<syx_snapshot_dirty_page_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<syx_snapshot_dirty_page_s>(),
        16usize,
        concat!("Size of: ", stringify!(syx_snapshot_dirty_page_s))
    );
    assert_eq!(
        ::std::mem::align_of::<syx_snapshot_dirty_page_s>(),
        8usize,
        concat!("Alignment of ", stringify!(syx_snapshot_dirty_page_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(syx_snapshot_dirty_page_s),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(syx_snapshot_dirty_page_s),
            "::",
            stringify!(data)
        )
    );
}
impl Default for syx_snapshot_dirty_page_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " A list of dirty pages with their old data."]
pub type syx_snapshot_dirty_page_t = syx_snapshot_dirty_page_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syx_snapshot_dirty_page_list_s {
    pub dirty_pages: *mut syx_snapshot_dirty_page_t,
    pub length: u64,
}
#[test]
fn bindgen_test_layout_syx_snapshot_dirty_page_list_s() {
    const UNINIT: ::std::mem::MaybeUninit<syx_snapshot_dirty_page_list_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<syx_snapshot_dirty_page_list_s>(),
        16usize,
        concat!("Size of: ", stringify!(syx_snapshot_dirty_page_list_s))
    );
    assert_eq!(
        ::std::mem::align_of::<syx_snapshot_dirty_page_list_s>(),
        8usize,
        concat!("Alignment of ", stringify!(syx_snapshot_dirty_page_list_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dirty_pages) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(syx_snapshot_dirty_page_list_s),
            "::",
            stringify!(dirty_pages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(syx_snapshot_dirty_page_list_s),
            "::",
            stringify!(length)
        )
    );
}
impl Default for syx_snapshot_dirty_page_list_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type syx_snapshot_dirty_page_list_t = syx_snapshot_dirty_page_list_s;
#[doc = " A snapshot increment. It is used to quickly\n save a VM state."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syx_snapshot_increment_s {
    pub parent: *mut syx_snapshot_increment_s,
    pub dss: *mut device_save_state_t,
    pub dirty_page_list: syx_snapshot_dirty_page_list_t,
}
#[test]
fn bindgen_test_layout_syx_snapshot_increment_s() {
    const UNINIT: ::std::mem::MaybeUninit<syx_snapshot_increment_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<syx_snapshot_increment_s>(),
        32usize,
        concat!("Size of: ", stringify!(syx_snapshot_increment_s))
    );
    assert_eq!(
        ::std::mem::align_of::<syx_snapshot_increment_s>(),
        8usize,
        concat!("Alignment of ", stringify!(syx_snapshot_increment_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(syx_snapshot_increment_s),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dss) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(syx_snapshot_increment_s),
            "::",
            stringify!(dss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dirty_page_list) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(syx_snapshot_increment_s),
            "::",
            stringify!(dirty_page_list)
        )
    );
}
impl Default for syx_snapshot_increment_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " A snapshot increment. It is used to quickly\n save a VM state."]
pub type syx_snapshot_increment_t = syx_snapshot_increment_s;
#[doc = " A snapshot. It is the main object used in this API to\n handle snapshoting."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syx_snapshot_s {
    pub root_snapshot: syx_snapshot_root_t,
    pub last_incremental_snapshot: *mut syx_snapshot_increment_t,
    pub dirty_list: syx_snapshot_dirty_list_t,
}
#[test]
fn bindgen_test_layout_syx_snapshot_s() {
    const UNINIT: ::std::mem::MaybeUninit<syx_snapshot_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<syx_snapshot_s>(),
        56usize,
        concat!("Size of: ", stringify!(syx_snapshot_s))
    );
    assert_eq!(
        ::std::mem::align_of::<syx_snapshot_s>(),
        8usize,
        concat!("Alignment of ", stringify!(syx_snapshot_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root_snapshot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(syx_snapshot_s),
            "::",
            stringify!(root_snapshot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_incremental_snapshot) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(syx_snapshot_s),
            "::",
            stringify!(last_incremental_snapshot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dirty_list) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(syx_snapshot_s),
            "::",
            stringify!(dirty_list)
        )
    );
}
impl Default for syx_snapshot_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " A snapshot. It is the main object used in this API to\n handle snapshoting."]
pub type syx_snapshot_t = syx_snapshot_s;
extern "C" {
    pub fn syx_snapshot_init();
}
extern "C" {
    pub fn syx_snapshot_create(
        track: bool,
        kind: device_snapshot_kind_t,
        devices: *mut *mut ::std::os::raw::c_char,
    ) -> *mut syx_snapshot_t;
}
extern "C" {
    pub fn syx_snapshot_root_restore(snapshot: *mut syx_snapshot_t);
}
extern "C" {
    #[doc = " @brief Add a dirty physical address to the list\n\n @param paddr The physical address to add"]
    pub fn syx_snapshot_dirty_list_add(paddr: hwaddr);
}
pub const FloatRoundMode_float_round_nearest_even: FloatRoundMode = FloatRoundMode(0);
pub const FloatRoundMode_float_round_down: FloatRoundMode = FloatRoundMode(1);
pub const FloatRoundMode_float_round_up: FloatRoundMode = FloatRoundMode(2);
pub const FloatRoundMode_float_round_to_zero: FloatRoundMode = FloatRoundMode(3);
pub const FloatRoundMode_float_round_ties_away: FloatRoundMode = FloatRoundMode(4);
pub const FloatRoundMode_float_round_to_odd: FloatRoundMode = FloatRoundMode(5);
pub const FloatRoundMode_float_round_to_odd_inf: FloatRoundMode = FloatRoundMode(6);
impl ::std::ops::BitOr<FloatRoundMode> for FloatRoundMode {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        FloatRoundMode(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for FloatRoundMode {
    #[inline]
    fn bitor_assign(&mut self, rhs: FloatRoundMode) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<FloatRoundMode> for FloatRoundMode {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        FloatRoundMode(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for FloatRoundMode {
    #[inline]
    fn bitand_assign(&mut self, rhs: FloatRoundMode) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct FloatRoundMode(pub ::std::os::raw::c_uchar);
pub const FloatX80RoundPrec_floatx80_precision_x: FloatX80RoundPrec = FloatX80RoundPrec(0);
pub const FloatX80RoundPrec_floatx80_precision_d: FloatX80RoundPrec = FloatX80RoundPrec(1);
pub const FloatX80RoundPrec_floatx80_precision_s: FloatX80RoundPrec = FloatX80RoundPrec(2);
impl ::std::ops::BitOr<FloatX80RoundPrec> for FloatX80RoundPrec {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        FloatX80RoundPrec(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for FloatX80RoundPrec {
    #[inline]
    fn bitor_assign(&mut self, rhs: FloatX80RoundPrec) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<FloatX80RoundPrec> for FloatX80RoundPrec {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        FloatX80RoundPrec(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for FloatX80RoundPrec {
    #[inline]
    fn bitand_assign(&mut self, rhs: FloatX80RoundPrec) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct FloatX80RoundPrec(pub ::std::os::raw::c_uchar);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct float_status {
    pub float_exception_flags: u16,
    pub float_rounding_mode: FloatRoundMode,
    pub floatx80_rounding_precision: FloatX80RoundPrec,
    pub tininess_before_rounding: bool,
    pub flush_to_zero: bool,
    pub flush_inputs_to_zero: bool,
    pub default_nan_mode: bool,
    pub snan_bit_is_one: bool,
    pub use_first_nan: bool,
    pub no_signaling_nans: bool,
    pub rebias_overflow: bool,
    pub rebias_underflow: bool,
}
#[test]
fn bindgen_test_layout_float_status() {
    const UNINIT: ::std::mem::MaybeUninit<float_status> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<float_status>(),
        14usize,
        concat!("Size of: ", stringify!(float_status))
    );
    assert_eq!(
        ::std::mem::align_of::<float_status>(),
        2usize,
        concat!("Alignment of ", stringify!(float_status))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).float_exception_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(float_status),
            "::",
            stringify!(float_exception_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).float_rounding_mode) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(float_status),
            "::",
            stringify!(float_rounding_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).floatx80_rounding_precision) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(float_status),
            "::",
            stringify!(floatx80_rounding_precision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tininess_before_rounding) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(float_status),
            "::",
            stringify!(tininess_before_rounding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flush_to_zero) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(float_status),
            "::",
            stringify!(flush_to_zero)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flush_inputs_to_zero) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(float_status),
            "::",
            stringify!(flush_inputs_to_zero)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_nan_mode) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(float_status),
            "::",
            stringify!(default_nan_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).snan_bit_is_one) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(float_status),
            "::",
            stringify!(snan_bit_is_one)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_first_nan) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(float_status),
            "::",
            stringify!(use_first_nan)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_signaling_nans) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(float_status),
            "::",
            stringify!(no_signaling_nans)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rebias_overflow) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(float_status),
            "::",
            stringify!(rebias_overflow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rebias_underflow) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(float_status),
            "::",
            stringify!(rebias_underflow)
        )
    );
}
impl Default for float_status {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arm_boot_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ARMGenericTimer {
    pub cval: u64,
    pub ctl: u64,
}
#[test]
fn bindgen_test_layout_ARMGenericTimer() {
    const UNINIT: ::std::mem::MaybeUninit<ARMGenericTimer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ARMGenericTimer>(),
        16usize,
        concat!("Size of: ", stringify!(ARMGenericTimer))
    );
    assert_eq!(
        ::std::mem::align_of::<ARMGenericTimer>(),
        8usize,
        concat!("Alignment of ", stringify!(ARMGenericTimer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ARMGenericTimer),
            "::",
            stringify!(cval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctl) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ARMGenericTimer),
            "::",
            stringify!(ctl)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct ARMVectorReg {
    pub d: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_ARMVectorReg() {
    const UNINIT: ::std::mem::MaybeUninit<ARMVectorReg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ARMVectorReg>(),
        16usize,
        concat!("Size of: ", stringify!(ARMVectorReg))
    );
    assert_eq!(
        ::std::mem::align_of::<ARMVectorReg>(),
        16usize,
        concat!("Alignment of ", stringify!(ARMVectorReg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ARMVectorReg),
            "::",
            stringify!(d)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CPUARMTBFlags {
    pub flags: u32,
    pub flags2: target_ulong,
}
#[test]
fn bindgen_test_layout_CPUARMTBFlags() {
    const UNINIT: ::std::mem::MaybeUninit<CPUARMTBFlags> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUARMTBFlags>(),
        8usize,
        concat!("Size of: ", stringify!(CPUARMTBFlags))
    );
    assert_eq!(
        ::std::mem::align_of::<CPUARMTBFlags>(),
        4usize,
        concat!("Alignment of ", stringify!(CPUARMTBFlags))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUARMTBFlags),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUARMTBFlags),
            "::",
            stringify!(flags2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ARMMMUFaultInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVICState {
    _unused: [u8; 0],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct CPUArchState {
    pub regs: [u32; 16usize],
    pub xregs: [u64; 32usize],
    pub pc: u64,
    pub pstate: u32,
    pub aarch64: bool,
    pub thumb: bool,
    pub hflags: CPUARMTBFlags,
    pub uncached_cpsr: u32,
    pub spsr: u32,
    pub banked_spsr: [u64; 8usize],
    pub banked_r13: [u32; 8usize],
    pub banked_r14: [u32; 8usize],
    pub usr_regs: [u32; 5usize],
    pub fiq_regs: [u32; 5usize],
    pub CF: u32,
    pub VF: u32,
    pub NF: u32,
    pub ZF: u32,
    pub QF: u32,
    pub GE: u32,
    pub condexec_bits: u32,
    pub btype: u32,
    pub daif: u64,
    pub svcr: u64,
    pub elr_el: [u64; 4usize],
    pub sp_el: [u64; 4usize],
    pub cp15: CPUArchState__bindgen_ty_1,
    pub v7m: CPUArchState__bindgen_ty_2,
    pub exception: CPUArchState__bindgen_ty_3,
    pub serror: CPUArchState__bindgen_ty_4,
    pub ext_dabt_raised: u8,
    pub irq_line_state: u32,
    pub teecr: u32,
    pub teehbr: u32,
    pub __bindgen_padding_0: u64,
    pub vfp: CPUArchState__bindgen_ty_5,
    pub exclusive_addr: u64,
    pub exclusive_val: u64,
    pub exclusive_high: u64,
    pub iwmmxt: CPUArchState__bindgen_ty_6,
    pub cpu_breakpoint: [*mut CPUBreakpoint; 16usize],
    pub cpu_watchpoint: [*mut CPUWatchpoint; 16usize],
    pub tlb_fi: *mut ARMMMUFaultInfo,
    pub end_reset_fields: CPUArchState__bindgen_ty_7,
    pub features: u64,
    pub pmsav7: CPUArchState__bindgen_ty_8,
    pub pmsav8: CPUArchState__bindgen_ty_9,
    pub sau: CPUArchState__bindgen_ty_10,
    pub nvic: *mut NVICState,
    pub boot_info: *const arm_boot_info,
    pub gicv3state: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CPUArchState__bindgen_ty_1 {
    pub c0_cpuid: u32,
    pub __bindgen_anon_1: CPUArchState__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: CPUArchState__bindgen_ty_1__bindgen_ty_2,
    pub vsctlr: u64,
    pub cpacr_el1: u64,
    pub cptr_el: [u64; 4usize],
    pub c1_xscaleauxcr: u32,
    pub sder: u64,
    pub nsacr: u32,
    pub __bindgen_anon_3: CPUArchState__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: CPUArchState__bindgen_ty_1__bindgen_ty_4,
    pub vttbr_el2: u64,
    pub vsttbr_el2: u64,
    pub tcr_el: [u64; 4usize],
    pub vtcr_el2: u64,
    pub vstcr_el2: u64,
    pub c2_data: u32,
    pub c2_insn: u32,
    pub __bindgen_anon_5: CPUArchState__bindgen_ty_1__bindgen_ty_5,
    pub pmsav5_data_ap: u32,
    pub pmsav5_insn_ap: u32,
    pub hcr_el2: u64,
    pub hcrx_el2: u64,
    pub scr_el3: u64,
    pub __bindgen_anon_6: CPUArchState__bindgen_ty_1__bindgen_ty_6,
    pub __bindgen_anon_7: CPUArchState__bindgen_ty_1__bindgen_ty_7,
    pub c6_region: [u32; 8usize],
    pub __bindgen_anon_8: CPUArchState__bindgen_ty_1__bindgen_ty_8,
    pub hpfar_el2: u64,
    pub hstr_el2: u64,
    pub __bindgen_anon_9: CPUArchState__bindgen_ty_1__bindgen_ty_9,
    pub c9_insn: u32,
    pub c9_data: u32,
    pub c9_pmcr: u64,
    pub c9_pmcnten: u64,
    pub c9_pmovsr: u64,
    pub c9_pmuserenr: u64,
    pub c9_pmselr: u64,
    pub c9_pminten: u64,
    pub __bindgen_anon_10: CPUArchState__bindgen_ty_1__bindgen_ty_10,
    pub __bindgen_anon_11: CPUArchState__bindgen_ty_1__bindgen_ty_11,
    pub mvbar: u32,
    pub rvbar: u64,
    pub __bindgen_anon_12: CPUArchState__bindgen_ty_1__bindgen_ty_12,
    pub __bindgen_anon_13: CPUArchState__bindgen_ty_1__bindgen_ty_13,
    pub __bindgen_anon_14: CPUArchState__bindgen_ty_1__bindgen_ty_14,
    pub tpidr2_el0: u64,
    pub tpidrurw_s: u64,
    pub tpidrprw_s: u64,
    pub tpidruro_s: u64,
    pub __bindgen_anon_15: CPUArchState__bindgen_ty_1__bindgen_ty_15,
    pub c14_cntfrq: u64,
    pub c14_cntkctl: u64,
    pub cnthctl_el2: u64,
    pub cntvoff_el2: u64,
    pub c14_timer: [ARMGenericTimer; 5usize],
    pub c15_cpar: u32,
    pub c15_ticonfig: u32,
    pub c15_i_max: u32,
    pub c15_i_min: u32,
    pub c15_threadid: u32,
    pub c15_config_base_address: u32,
    pub c15_diagnostic: u32,
    pub c15_power_diagnostic: u32,
    pub c15_power_control: u32,
    pub dbgbvr: [u64; 16usize],
    pub dbgbcr: [u64; 16usize],
    pub dbgwvr: [u64; 16usize],
    pub dbgwcr: [u64; 16usize],
    pub dbgclaim: u64,
    pub mdscr_el1: u64,
    pub oslsr_el1: u64,
    pub osdlr_el1: u64,
    pub mdcr_el2: u64,
    pub mdcr_el3: u64,
    pub c15_ccnt: u64,
    pub c15_ccnt_delta: u64,
    pub c14_pmevcntr: [u64; 31usize],
    pub c14_pmevcntr_delta: [u64; 31usize],
    pub c14_pmevtyper: [u64; 31usize],
    pub pmccfiltr_el0: u64,
    pub vpidr_el2: u64,
    pub vmpidr_el2: u64,
    pub tfsr_el: [u64; 4usize],
    pub gcr_el1: u64,
    pub rgsr_el1: u64,
    pub disr_el1: u64,
    pub vdisr_el2: u64,
    pub vsesr_el2: u64,
    pub fgt_read: [u64; 2usize],
    pub fgt_write: [u64; 2usize],
    pub fgt_exec: [u64; 1usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CPUArchState__bindgen_ty_1__bindgen_ty_1 {
    pub __bindgen_anon_1: CPUArchState__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub csselr_el: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CPUArchState__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub _unused_csselr0: u64,
    pub csselr_ns: u64,
    pub _unused_csselr1: u64,
    pub csselr_s: u64,
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused_csselr0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_unused_csselr0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csselr_ns) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(csselr_ns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused_csselr1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_unused_csselr1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csselr_s) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(csselr_s)
        )
    );
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csselr_el) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(csselr_el)
        )
    );
}
impl Default for CPUArchState__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for CPUArchState__bindgen_ty_1__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "CPUArchState__bindgen_ty_1__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CPUArchState__bindgen_ty_1__bindgen_ty_2 {
    pub __bindgen_anon_1: CPUArchState__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    pub sctlr_el: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CPUArchState__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub _unused_sctlr: u64,
    pub sctlr_ns: u64,
    pub hsctlr: u64,
    pub sctlr_s: u64,
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused_sctlr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(_unused_sctlr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sctlr_ns) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(sctlr_ns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hsctlr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(hsctlr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sctlr_s) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(sctlr_s)
        )
    );
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_2>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sctlr_el) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(sctlr_el)
        )
    );
}
impl Default for CPUArchState__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for CPUArchState__bindgen_ty_1__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "CPUArchState__bindgen_ty_1__bindgen_ty_2 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CPUArchState__bindgen_ty_1__bindgen_ty_3 {
    pub __bindgen_anon_1: CPUArchState__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1,
    pub ttbr0_el: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CPUArchState__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1 {
    pub _unused_ttbr0_0: u64,
    pub ttbr0_ns: u64,
    pub _unused_ttbr0_1: u64,
    pub ttbr0_s: u64,
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused_ttbr0_0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(_unused_ttbr0_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ttbr0_ns) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(ttbr0_ns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused_ttbr0_1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(_unused_ttbr0_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ttbr0_s) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(ttbr0_s)
        )
    );
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_3>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ttbr0_el) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(ttbr0_el)
        )
    );
}
impl Default for CPUArchState__bindgen_ty_1__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for CPUArchState__bindgen_ty_1__bindgen_ty_3 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "CPUArchState__bindgen_ty_1__bindgen_ty_3 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CPUArchState__bindgen_ty_1__bindgen_ty_4 {
    pub __bindgen_anon_1: CPUArchState__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1,
    pub ttbr1_el: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CPUArchState__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1 {
    pub _unused_ttbr1_0: u64,
    pub ttbr1_ns: u64,
    pub _unused_ttbr1_1: u64,
    pub ttbr1_s: u64,
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused_ttbr1_0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(_unused_ttbr1_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ttbr1_ns) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(ttbr1_ns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused_ttbr1_1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(_unused_ttbr1_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ttbr1_s) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(ttbr1_s)
        )
    );
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_4>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ttbr1_el) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(ttbr1_el)
        )
    );
}
impl Default for CPUArchState__bindgen_ty_1__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for CPUArchState__bindgen_ty_1__bindgen_ty_4 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "CPUArchState__bindgen_ty_1__bindgen_ty_4 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CPUArchState__bindgen_ty_1__bindgen_ty_5 {
    pub __bindgen_anon_1: CPUArchState__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
    pub __bindgen_anon_2: CPUArchState__bindgen_ty_1__bindgen_ty_5__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CPUArchState__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub dacr_ns: u64,
    pub dacr_s: u64,
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dacr_ns) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(dacr_ns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dacr_s) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(dacr_s)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CPUArchState__bindgen_ty_1__bindgen_ty_5__bindgen_ty_2 {
    pub dacr32_el2: u64,
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_5__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_5__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_5__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_5__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_5__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_5__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dacr32_el2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_5__bindgen_ty_2),
            "::",
            stringify!(dacr32_el2)
        )
    );
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_5>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_5)
        )
    );
}
impl Default for CPUArchState__bindgen_ty_1__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for CPUArchState__bindgen_ty_1__bindgen_ty_5 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "CPUArchState__bindgen_ty_1__bindgen_ty_5 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CPUArchState__bindgen_ty_1__bindgen_ty_6 {
    pub __bindgen_anon_1: CPUArchState__bindgen_ty_1__bindgen_ty_6__bindgen_ty_1,
    pub __bindgen_anon_2: CPUArchState__bindgen_ty_1__bindgen_ty_6__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CPUArchState__bindgen_ty_1__bindgen_ty_6__bindgen_ty_1 {
    pub ifsr_ns: u64,
    pub ifsr_s: u64,
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_6__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_6__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_6__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_6__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_6__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_6__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ifsr_ns) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_6__bindgen_ty_1),
            "::",
            stringify!(ifsr_ns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ifsr_s) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_6__bindgen_ty_1),
            "::",
            stringify!(ifsr_s)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CPUArchState__bindgen_ty_1__bindgen_ty_6__bindgen_ty_2 {
    pub ifsr32_el2: u64,
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_6__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_6__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_6__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_6__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_6__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_6__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ifsr32_el2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_6__bindgen_ty_2),
            "::",
            stringify!(ifsr32_el2)
        )
    );
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_6() {
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_6>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_6)
        )
    );
}
impl Default for CPUArchState__bindgen_ty_1__bindgen_ty_6 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for CPUArchState__bindgen_ty_1__bindgen_ty_6 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "CPUArchState__bindgen_ty_1__bindgen_ty_6 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CPUArchState__bindgen_ty_1__bindgen_ty_7 {
    pub __bindgen_anon_1: CPUArchState__bindgen_ty_1__bindgen_ty_7__bindgen_ty_1,
    pub esr_el: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CPUArchState__bindgen_ty_1__bindgen_ty_7__bindgen_ty_1 {
    pub _unused_dfsr: u64,
    pub dfsr_ns: u64,
    pub hsr: u64,
    pub dfsr_s: u64,
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_7__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_7__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_7__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_7__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_7__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_7__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused_dfsr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_7__bindgen_ty_1),
            "::",
            stringify!(_unused_dfsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfsr_ns) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_7__bindgen_ty_1),
            "::",
            stringify!(dfsr_ns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hsr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_7__bindgen_ty_1),
            "::",
            stringify!(hsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfsr_s) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_7__bindgen_ty_1),
            "::",
            stringify!(dfsr_s)
        )
    );
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_7() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_7> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_7>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).esr_el) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(esr_el)
        )
    );
}
impl Default for CPUArchState__bindgen_ty_1__bindgen_ty_7 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for CPUArchState__bindgen_ty_1__bindgen_ty_7 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "CPUArchState__bindgen_ty_1__bindgen_ty_7 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CPUArchState__bindgen_ty_1__bindgen_ty_8 {
    pub __bindgen_anon_1: CPUArchState__bindgen_ty_1__bindgen_ty_8__bindgen_ty_1,
    pub far_el: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CPUArchState__bindgen_ty_1__bindgen_ty_8__bindgen_ty_1 {
    pub _unused_far0: u64,
    pub dfar_ns: u32,
    pub ifar_ns: u32,
    pub dfar_s: u32,
    pub ifar_s: u32,
    pub _unused_far3: u64,
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_8__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_8__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_8__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_8__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_8__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_8__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused_far0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_8__bindgen_ty_1),
            "::",
            stringify!(_unused_far0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfar_ns) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_8__bindgen_ty_1),
            "::",
            stringify!(dfar_ns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ifar_ns) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_8__bindgen_ty_1),
            "::",
            stringify!(ifar_ns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfar_s) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_8__bindgen_ty_1),
            "::",
            stringify!(dfar_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ifar_s) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_8__bindgen_ty_1),
            "::",
            stringify!(ifar_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused_far3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_8__bindgen_ty_1),
            "::",
            stringify!(_unused_far3)
        )
    );
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_8() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_8> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_8>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_8)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_8>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).far_el) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(far_el)
        )
    );
}
impl Default for CPUArchState__bindgen_ty_1__bindgen_ty_8 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for CPUArchState__bindgen_ty_1__bindgen_ty_8 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "CPUArchState__bindgen_ty_1__bindgen_ty_8 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CPUArchState__bindgen_ty_1__bindgen_ty_9 {
    pub __bindgen_anon_1: CPUArchState__bindgen_ty_1__bindgen_ty_9__bindgen_ty_1,
    pub par_el: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CPUArchState__bindgen_ty_1__bindgen_ty_9__bindgen_ty_1 {
    pub _unused_par_0: u64,
    pub par_ns: u64,
    pub _unused_par_1: u64,
    pub par_s: u64,
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_9__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_9__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_9__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_9__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_9__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_9__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused_par_0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_9__bindgen_ty_1),
            "::",
            stringify!(_unused_par_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_ns) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_9__bindgen_ty_1),
            "::",
            stringify!(par_ns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused_par_1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_9__bindgen_ty_1),
            "::",
            stringify!(_unused_par_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_s) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_9__bindgen_ty_1),
            "::",
            stringify!(par_s)
        )
    );
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_9() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_9> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_9>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_9)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_9>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_el) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(par_el)
        )
    );
}
impl Default for CPUArchState__bindgen_ty_1__bindgen_ty_9 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for CPUArchState__bindgen_ty_1__bindgen_ty_9 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "CPUArchState__bindgen_ty_1__bindgen_ty_9 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CPUArchState__bindgen_ty_1__bindgen_ty_10 {
    pub __bindgen_anon_1: CPUArchState__bindgen_ty_1__bindgen_ty_10__bindgen_ty_1,
    pub mair_el: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CPUArchState__bindgen_ty_1__bindgen_ty_10__bindgen_ty_1 {
    pub _unused_mair_0: u64,
    pub mair0_ns: u32,
    pub mair1_ns: u32,
    pub _unused_mair_1: u64,
    pub mair0_s: u32,
    pub mair1_s: u32,
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_10__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_10__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_10__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_10__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_10__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_10__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused_mair_0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_10__bindgen_ty_1),
            "::",
            stringify!(_unused_mair_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mair0_ns) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_10__bindgen_ty_1),
            "::",
            stringify!(mair0_ns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mair1_ns) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_10__bindgen_ty_1),
            "::",
            stringify!(mair1_ns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused_mair_1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_10__bindgen_ty_1),
            "::",
            stringify!(_unused_mair_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mair0_s) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_10__bindgen_ty_1),
            "::",
            stringify!(mair0_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mair1_s) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_10__bindgen_ty_1),
            "::",
            stringify!(mair1_s)
        )
    );
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_10() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_10> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_10>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_10)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_10>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mair_el) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(mair_el)
        )
    );
}
impl Default for CPUArchState__bindgen_ty_1__bindgen_ty_10 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for CPUArchState__bindgen_ty_1__bindgen_ty_10 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "CPUArchState__bindgen_ty_1__bindgen_ty_10 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CPUArchState__bindgen_ty_1__bindgen_ty_11 {
    pub __bindgen_anon_1: CPUArchState__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1,
    pub vbar_el: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CPUArchState__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1 {
    pub _unused_vbar: u64,
    pub vbar_ns: u64,
    pub hvbar: u64,
    pub vbar_s: u64,
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused_vbar) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1),
            "::",
            stringify!(_unused_vbar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vbar_ns) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1),
            "::",
            stringify!(vbar_ns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hvbar) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1),
            "::",
            stringify!(hvbar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vbar_s) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1),
            "::",
            stringify!(vbar_s)
        )
    );
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_11() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_11> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_11>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_11)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_11>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vbar_el) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(vbar_el)
        )
    );
}
impl Default for CPUArchState__bindgen_ty_1__bindgen_ty_11 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for CPUArchState__bindgen_ty_1__bindgen_ty_11 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "CPUArchState__bindgen_ty_1__bindgen_ty_11 {{ union }}")
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CPUArchState__bindgen_ty_1__bindgen_ty_12 {
    pub fcseidr_ns: u32,
    pub fcseidr_s: u32,
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_12() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_12> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_12>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_12)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_12>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fcseidr_ns) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(fcseidr_ns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fcseidr_s) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(fcseidr_s)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CPUArchState__bindgen_ty_1__bindgen_ty_13 {
    pub __bindgen_anon_1: CPUArchState__bindgen_ty_1__bindgen_ty_13__bindgen_ty_1,
    pub contextidr_el: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CPUArchState__bindgen_ty_1__bindgen_ty_13__bindgen_ty_1 {
    pub _unused_contextidr_0: u64,
    pub contextidr_ns: u64,
    pub _unused_contextidr_1: u64,
    pub contextidr_s: u64,
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_13__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_13__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_13__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_13__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_13__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_13__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused_contextidr_0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_13__bindgen_ty_1),
            "::",
            stringify!(_unused_contextidr_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contextidr_ns) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_13__bindgen_ty_1),
            "::",
            stringify!(contextidr_ns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused_contextidr_1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_13__bindgen_ty_1),
            "::",
            stringify!(_unused_contextidr_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contextidr_s) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_13__bindgen_ty_1),
            "::",
            stringify!(contextidr_s)
        )
    );
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_13() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_13> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_13>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_13)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_13>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contextidr_el) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_13),
            "::",
            stringify!(contextidr_el)
        )
    );
}
impl Default for CPUArchState__bindgen_ty_1__bindgen_ty_13 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for CPUArchState__bindgen_ty_1__bindgen_ty_13 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "CPUArchState__bindgen_ty_1__bindgen_ty_13 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CPUArchState__bindgen_ty_1__bindgen_ty_14 {
    pub __bindgen_anon_1: CPUArchState__bindgen_ty_1__bindgen_ty_14__bindgen_ty_1,
    pub tpidr_el: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CPUArchState__bindgen_ty_1__bindgen_ty_14__bindgen_ty_1 {
    pub tpidrurw_ns: u64,
    pub tpidrprw_ns: u64,
    pub htpidr: u64,
    pub _tpidr_el3: u64,
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_14__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_14__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_14__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_14__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_14__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_14__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tpidrurw_ns) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_14__bindgen_ty_1),
            "::",
            stringify!(tpidrurw_ns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tpidrprw_ns) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_14__bindgen_ty_1),
            "::",
            stringify!(tpidrprw_ns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).htpidr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_14__bindgen_ty_1),
            "::",
            stringify!(htpidr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._tpidr_el3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_14__bindgen_ty_1),
            "::",
            stringify!(_tpidr_el3)
        )
    );
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_14() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_14> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_14>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_14)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_14>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tpidr_el) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_14),
            "::",
            stringify!(tpidr_el)
        )
    );
}
impl Default for CPUArchState__bindgen_ty_1__bindgen_ty_14 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for CPUArchState__bindgen_ty_1__bindgen_ty_14 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "CPUArchState__bindgen_ty_1__bindgen_ty_14 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CPUArchState__bindgen_ty_1__bindgen_ty_15 {
    pub tpidruro_ns: u64,
    pub tpidrro_el: [u64; 1usize],
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1__bindgen_ty_15() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1__bindgen_ty_15> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1__bindgen_ty_15>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_15)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1__bindgen_ty_15>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tpidruro_ns) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_15),
            "::",
            stringify!(tpidruro_ns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tpidrro_el) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1__bindgen_ty_15),
            "::",
            stringify!(tpidrro_el)
        )
    );
}
impl Default for CPUArchState__bindgen_ty_1__bindgen_ty_15 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for CPUArchState__bindgen_ty_1__bindgen_ty_15 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "CPUArchState__bindgen_ty_1__bindgen_ty_15 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_1>(),
        2344usize,
        concat!("Size of: ", stringify!(CPUArchState__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(CPUArchState__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c0_cpuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c0_cpuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vsctlr) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(vsctlr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpacr_el1) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(cpacr_el1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cptr_el) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(cptr_el)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c1_xscaleauxcr) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c1_xscaleauxcr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sder) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(sder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nsacr) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(nsacr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vttbr_el2) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(vttbr_el2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vsttbr_el2) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(vsttbr_el2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcr_el) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(tcr_el)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtcr_el2) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(vtcr_el2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vstcr_el2) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(vstcr_el2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c2_data) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c2_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c2_insn) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c2_insn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmsav5_data_ap) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(pmsav5_data_ap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmsav5_insn_ap) as usize - ptr as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(pmsav5_insn_ap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hcr_el2) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(hcr_el2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hcrx_el2) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(hcrx_el2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scr_el3) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(scr_el3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c6_region) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c6_region)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hpfar_el2) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(hpfar_el2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hstr_el2) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(hstr_el2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c9_insn) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c9_insn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c9_data) as usize - ptr as usize },
        492usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c9_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c9_pmcr) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c9_pmcr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c9_pmcnten) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c9_pmcnten)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c9_pmovsr) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c9_pmovsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c9_pmuserenr) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c9_pmuserenr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c9_pmselr) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c9_pmselr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c9_pminten) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c9_pminten)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mvbar) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(mvbar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rvbar) as usize - ptr as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(rvbar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tpidr2_el0) as usize - ptr as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(tpidr2_el0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tpidrurw_s) as usize - ptr as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(tpidrurw_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tpidrprw_s) as usize - ptr as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(tpidrprw_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tpidruro_s) as usize - ptr as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(tpidruro_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c14_cntfrq) as usize - ptr as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c14_cntfrq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c14_cntkctl) as usize - ptr as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c14_cntkctl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cnthctl_el2) as usize - ptr as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(cnthctl_el2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cntvoff_el2) as usize - ptr as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(cntvoff_el2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c14_timer) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c14_timer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c15_cpar) as usize - ptr as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c15_cpar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c15_ticonfig) as usize - ptr as usize },
        852usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c15_ticonfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c15_i_max) as usize - ptr as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c15_i_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c15_i_min) as usize - ptr as usize },
        860usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c15_i_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c15_threadid) as usize - ptr as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c15_threadid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c15_config_base_address) as usize - ptr as usize },
        868usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c15_config_base_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c15_diagnostic) as usize - ptr as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c15_diagnostic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c15_power_diagnostic) as usize - ptr as usize },
        876usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c15_power_diagnostic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c15_power_control) as usize - ptr as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c15_power_control)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dbgbvr) as usize - ptr as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(dbgbvr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dbgbcr) as usize - ptr as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(dbgbcr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dbgwvr) as usize - ptr as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(dbgwvr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dbgwcr) as usize - ptr as usize },
        1272usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(dbgwcr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dbgclaim) as usize - ptr as usize },
        1400usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(dbgclaim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mdscr_el1) as usize - ptr as usize },
        1408usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(mdscr_el1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oslsr_el1) as usize - ptr as usize },
        1416usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(oslsr_el1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).osdlr_el1) as usize - ptr as usize },
        1424usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(osdlr_el1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mdcr_el2) as usize - ptr as usize },
        1432usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(mdcr_el2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mdcr_el3) as usize - ptr as usize },
        1440usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(mdcr_el3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c15_ccnt) as usize - ptr as usize },
        1448usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c15_ccnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c15_ccnt_delta) as usize - ptr as usize },
        1456usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c15_ccnt_delta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c14_pmevcntr) as usize - ptr as usize },
        1464usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c14_pmevcntr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c14_pmevcntr_delta) as usize - ptr as usize },
        1712usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c14_pmevcntr_delta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c14_pmevtyper) as usize - ptr as usize },
        1960usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(c14_pmevtyper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmccfiltr_el0) as usize - ptr as usize },
        2208usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(pmccfiltr_el0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vpidr_el2) as usize - ptr as usize },
        2216usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(vpidr_el2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vmpidr_el2) as usize - ptr as usize },
        2224usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(vmpidr_el2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tfsr_el) as usize - ptr as usize },
        2232usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(tfsr_el)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gcr_el1) as usize - ptr as usize },
        2264usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(gcr_el1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rgsr_el1) as usize - ptr as usize },
        2272usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(rgsr_el1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disr_el1) as usize - ptr as usize },
        2280usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(disr_el1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vdisr_el2) as usize - ptr as usize },
        2288usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(vdisr_el2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vsesr_el2) as usize - ptr as usize },
        2296usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(vsesr_el2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fgt_read) as usize - ptr as usize },
        2304usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(fgt_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fgt_write) as usize - ptr as usize },
        2320usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(fgt_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fgt_exec) as usize - ptr as usize },
        2336usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_1),
            "::",
            stringify!(fgt_exec)
        )
    );
}
impl Default for CPUArchState__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for CPUArchState__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "CPUArchState__bindgen_ty_1 {{ __bindgen_anon_1: {:?}, __bindgen_anon_2: {:?}, cptr_el: {:?}, __bindgen_anon_3: {:?}, __bindgen_anon_4: {:?}, tcr_el: {:?}, __bindgen_anon_5: {:?}, __bindgen_anon_6: {:?}, __bindgen_anon_7: {:?}, c6_region: {:?}, __bindgen_anon_8: {:?}, __bindgen_anon_9: {:?}, __bindgen_anon_10: {:?}, __bindgen_anon_11: {:?}, __bindgen_anon_12: {:?}, __bindgen_anon_13: {:?}, __bindgen_anon_14: {:?}, __bindgen_anon_15: {:?}, c14_timer: {:?}, dbgbvr: {:?}, dbgbcr: {:?}, dbgwvr: {:?}, dbgwcr: {:?}, c14_pmevcntr: {:?}, c14_pmevcntr_delta: {:?}, c14_pmevtyper: {:?}, tfsr_el: {:?}, fgt_read: {:?}, fgt_write: {:?}, fgt_exec: {:?} }}" , self . __bindgen_anon_1 , self . __bindgen_anon_2 , self . cptr_el , self . __bindgen_anon_3 , self . __bindgen_anon_4 , self . tcr_el , self . __bindgen_anon_5 , self . __bindgen_anon_6 , self . __bindgen_anon_7 , self . c6_region , self . __bindgen_anon_8 , self . __bindgen_anon_9 , self . __bindgen_anon_10 , self . __bindgen_anon_11 , self . __bindgen_anon_12 , self . __bindgen_anon_13 , self . __bindgen_anon_14 , self . __bindgen_anon_15 , self . c14_timer , self . dbgbvr , self . dbgbcr , self . dbgwvr , self . dbgwcr , self . c14_pmevcntr , self . c14_pmevcntr_delta , self . c14_pmevtyper , self . tfsr_el , self . fgt_read , self . fgt_write , self . fgt_exec)
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CPUArchState__bindgen_ty_2 {
    pub other_sp: u32,
    pub other_ss_msp: u32,
    pub other_ss_psp: u32,
    pub vecbase: [u32; 2usize],
    pub basepri: [u32; 2usize],
    pub control: [u32; 2usize],
    pub ccr: [u32; 2usize],
    pub cfsr: [u32; 2usize],
    pub hfsr: u32,
    pub dfsr: u32,
    pub sfsr: u32,
    pub mmfar: [u32; 2usize],
    pub bfar: u32,
    pub sfar: u32,
    pub mpu_ctrl: [::std::os::raw::c_uint; 2usize],
    pub exception: ::std::os::raw::c_int,
    pub primask: [u32; 2usize],
    pub faultmask: [u32; 2usize],
    pub aircr: u32,
    pub secure: u32,
    pub csselr: [u32; 2usize],
    pub scr: [u32; 2usize],
    pub msplim: [u32; 2usize],
    pub psplim: [u32; 2usize],
    pub fpcar: [u32; 2usize],
    pub fpccr: [u32; 2usize],
    pub fpdscr: [u32; 2usize],
    pub cpacr: [u32; 2usize],
    pub nsacr: u32,
    pub ltpsize: u32,
    pub vpr: u32,
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_2>(),
        192usize,
        concat!("Size of: ", stringify!(CPUArchState__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(CPUArchState__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).other_sp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(other_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).other_ss_msp) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(other_ss_msp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).other_ss_psp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(other_ss_psp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vecbase) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(vecbase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basepri) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(basepri)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).control) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(control)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ccr) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(ccr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cfsr) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(cfsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hfsr) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(hfsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfsr) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(dfsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sfsr) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(sfsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mmfar) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(mmfar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bfar) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(bfar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sfar) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(sfar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mpu_ctrl) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(mpu_ctrl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exception) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(exception)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primask) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(primask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).faultmask) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(faultmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aircr) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(aircr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).secure) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(secure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csselr) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(csselr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scr) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(scr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msplim) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(msplim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psplim) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(psplim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpcar) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(fpcar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpccr) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(fpccr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpdscr) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(fpdscr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpacr) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(cpacr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nsacr) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(nsacr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ltpsize) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(ltpsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vpr) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_2),
            "::",
            stringify!(vpr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CPUArchState__bindgen_ty_3 {
    pub syndrome: u32,
    pub fsr: u32,
    pub vaddress: u64,
    pub target_el: u32,
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_3>(),
        24usize,
        concat!("Size of: ", stringify!(CPUArchState__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(CPUArchState__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).syndrome) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_3),
            "::",
            stringify!(syndrome)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_3),
            "::",
            stringify!(fsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vaddress) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_3),
            "::",
            stringify!(vaddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_el) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_3),
            "::",
            stringify!(target_el)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CPUArchState__bindgen_ty_4 {
    pub pending: u8,
    pub has_esr: u8,
    pub esr: u64,
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_4>(),
        16usize,
        concat!("Size of: ", stringify!(CPUArchState__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(CPUArchState__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pending) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_4),
            "::",
            stringify!(pending)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_esr) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_4),
            "::",
            stringify!(has_esr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).esr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_4),
            "::",
            stringify!(esr)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct CPUArchState__bindgen_ty_5 {
    pub zregs: [ARMVectorReg; 32usize],
    pub qc: [u32; 4usize],
    pub vec_len: ::std::os::raw::c_int,
    pub vec_stride: ::std::os::raw::c_int,
    pub xregs: [u32; 16usize],
    pub scratch: [u32; 8usize],
    pub fp_status: float_status,
    pub fp_status_f16: float_status,
    pub standard_fp_status: float_status,
    pub standard_fp_status_f16: float_status,
    pub zcr_el: [u64; 4usize],
    pub smcr_el: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_5>(),
        752usize,
        concat!("Size of: ", stringify!(CPUArchState__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_5>(),
        16usize,
        concat!("Alignment of ", stringify!(CPUArchState__bindgen_ty_5))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zregs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_5),
            "::",
            stringify!(zregs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qc) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_5),
            "::",
            stringify!(qc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vec_len) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_5),
            "::",
            stringify!(vec_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vec_stride) as usize - ptr as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_5),
            "::",
            stringify!(vec_stride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xregs) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_5),
            "::",
            stringify!(xregs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scratch) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_5),
            "::",
            stringify!(scratch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_status) as usize - ptr as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_5),
            "::",
            stringify!(fp_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_status_f16) as usize - ptr as usize },
        646usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_5),
            "::",
            stringify!(fp_status_f16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).standard_fp_status) as usize - ptr as usize },
        660usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_5),
            "::",
            stringify!(standard_fp_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).standard_fp_status_f16) as usize - ptr as usize },
        674usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_5),
            "::",
            stringify!(standard_fp_status_f16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zcr_el) as usize - ptr as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_5),
            "::",
            stringify!(zcr_el)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smcr_el) as usize - ptr as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_5),
            "::",
            stringify!(smcr_el)
        )
    );
}
impl Default for CPUArchState__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CPUArchState__bindgen_ty_6 {
    pub regs: [u64; 16usize],
    pub val: u64,
    pub cregs: [u32; 16usize],
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_6> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_6>(),
        200usize,
        concat!("Size of: ", stringify!(CPUArchState__bindgen_ty_6))
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_6>(),
        8usize,
        concat!("Alignment of ", stringify!(CPUArchState__bindgen_ty_6))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_6),
            "::",
            stringify!(regs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_6),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cregs) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_6),
            "::",
            stringify!(cregs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CPUArchState__bindgen_ty_7 {}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_7() {
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_7>(),
        0usize,
        concat!("Size of: ", stringify!(CPUArchState__bindgen_ty_7))
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_7>(),
        1usize,
        concat!("Alignment of ", stringify!(CPUArchState__bindgen_ty_7))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPUArchState__bindgen_ty_8 {
    pub drbar: *mut u32,
    pub drsr: *mut u32,
    pub dracr: *mut u32,
    pub rnr: [u32; 2usize],
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_8() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_8> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_8>(),
        32usize,
        concat!("Size of: ", stringify!(CPUArchState__bindgen_ty_8))
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_8>(),
        8usize,
        concat!("Alignment of ", stringify!(CPUArchState__bindgen_ty_8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drbar) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_8),
            "::",
            stringify!(drbar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drsr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_8),
            "::",
            stringify!(drsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dracr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_8),
            "::",
            stringify!(dracr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rnr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_8),
            "::",
            stringify!(rnr)
        )
    );
}
impl Default for CPUArchState__bindgen_ty_8 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPUArchState__bindgen_ty_9 {
    pub rbar: [*mut u32; 2usize],
    pub rlar: [*mut u32; 2usize],
    pub hprbar: *mut u32,
    pub hprlar: *mut u32,
    pub mair0: [u32; 2usize],
    pub mair1: [u32; 2usize],
    pub hprselr: u32,
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_9() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_9> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_9>(),
        72usize,
        concat!("Size of: ", stringify!(CPUArchState__bindgen_ty_9))
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_9>(),
        8usize,
        concat!("Alignment of ", stringify!(CPUArchState__bindgen_ty_9))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbar) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_9),
            "::",
            stringify!(rbar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rlar) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_9),
            "::",
            stringify!(rlar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hprbar) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_9),
            "::",
            stringify!(hprbar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hprlar) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_9),
            "::",
            stringify!(hprlar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mair0) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_9),
            "::",
            stringify!(mair0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mair1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_9),
            "::",
            stringify!(mair1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hprselr) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_9),
            "::",
            stringify!(hprselr)
        )
    );
}
impl Default for CPUArchState__bindgen_ty_9 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPUArchState__bindgen_ty_10 {
    pub rbar: *mut u32,
    pub rlar: *mut u32,
    pub rnr: u32,
    pub ctrl: u32,
}
#[test]
fn bindgen_test_layout_CPUArchState__bindgen_ty_10() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState__bindgen_ty_10> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState__bindgen_ty_10>(),
        24usize,
        concat!("Size of: ", stringify!(CPUArchState__bindgen_ty_10))
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState__bindgen_ty_10>(),
        8usize,
        concat!("Alignment of ", stringify!(CPUArchState__bindgen_ty_10))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbar) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_10),
            "::",
            stringify!(rbar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rlar) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_10),
            "::",
            stringify!(rlar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rnr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_10),
            "::",
            stringify!(rnr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctrl) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState__bindgen_ty_10),
            "::",
            stringify!(ctrl)
        )
    );
}
impl Default for CPUArchState__bindgen_ty_10 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_CPUArchState() {
    const UNINIT: ::std::mem::MaybeUninit<CPUArchState> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPUArchState>(),
        4640usize,
        concat!("Size of: ", stringify!(CPUArchState))
    );
    assert_eq!(
        ::std::mem::align_of::<CPUArchState>(),
        16usize,
        concat!("Alignment of ", stringify!(CPUArchState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(regs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xregs) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(xregs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pc) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(pc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pstate) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(pstate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aarch64) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(aarch64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thumb) as usize - ptr as usize },
        333usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(thumb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hflags) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(hflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uncached_cpsr) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(uncached_cpsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spsr) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(spsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).banked_spsr) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(banked_spsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).banked_r13) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(banked_r13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).banked_r14) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(banked_r14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usr_regs) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(usr_regs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fiq_regs) as usize - ptr as usize },
        500usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(fiq_regs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CF) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(CF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VF) as usize - ptr as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(VF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NF) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(NF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ZF) as usize - ptr as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(ZF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QF) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(QF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GE) as usize - ptr as usize },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(GE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).condexec_bits) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(condexec_bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).btype) as usize - ptr as usize },
        548usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(btype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).daif) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(daif)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).svcr) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(svcr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elr_el) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(elr_el)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_el) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(sp_el)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cp15) as usize - ptr as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(cp15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v7m) as usize - ptr as usize },
        2976usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(v7m)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exception) as usize - ptr as usize },
        3168usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(exception)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serror) as usize - ptr as usize },
        3192usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(serror)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ext_dabt_raised) as usize - ptr as usize },
        3208usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(ext_dabt_raised)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).irq_line_state) as usize - ptr as usize },
        3212usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(irq_line_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).teecr) as usize - ptr as usize },
        3216usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(teecr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).teehbr) as usize - ptr as usize },
        3220usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(teehbr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vfp) as usize - ptr as usize },
        3232usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(vfp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exclusive_addr) as usize - ptr as usize },
        3984usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(exclusive_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exclusive_val) as usize - ptr as usize },
        3992usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(exclusive_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exclusive_high) as usize - ptr as usize },
        4000usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(exclusive_high)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iwmmxt) as usize - ptr as usize },
        4008usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(iwmmxt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_breakpoint) as usize - ptr as usize },
        4208usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(cpu_breakpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_watchpoint) as usize - ptr as usize },
        4336usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(cpu_watchpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tlb_fi) as usize - ptr as usize },
        4464usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(tlb_fi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_reset_fields) as usize - ptr as usize },
        4472usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(end_reset_fields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).features) as usize - ptr as usize },
        4472usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmsav7) as usize - ptr as usize },
        4480usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(pmsav7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmsav8) as usize - ptr as usize },
        4512usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(pmsav8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sau) as usize - ptr as usize },
        4584usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(sau)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nvic) as usize - ptr as usize },
        4608usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(nvic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boot_info) as usize - ptr as usize },
        4616usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(boot_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gicv3state) as usize - ptr as usize },
        4624usize,
        concat!(
            "Offset of field: ",
            stringify!(CPUArchState),
            "::",
            stringify!(gicv3state)
        )
    );
}
impl Default for CPUArchState {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for CPUArchState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "CPUArchState {{ regs: {:?}, xregs: {:?}, aarch64: {:?}, thumb: {:?}, hflags: {:?}, banked_spsr: {:?}, banked_r13: {:?}, banked_r14: {:?}, usr_regs: {:?}, fiq_regs: {:?}, elr_el: {:?}, sp_el: {:?}, cp15: {:?}, v7m: {:?}, exception: {:?}, serror: {:?}, vfp: {:?}, iwmmxt: {:?}, cpu_breakpoint: {:?}, cpu_watchpoint: {:?}, tlb_fi: {:?}, end_reset_fields: {:?}, pmsav7: {:?}, pmsav8: {:?}, sau: {:?}, nvic: {:?}, boot_info: {:?}, gicv3state: {:?} }}" , self . regs , self . xregs , self . aarch64 , self . thumb , self . hflags , self . banked_spsr , self . banked_r13 , self . banked_r14 , self . usr_regs , self . fiq_regs , self . elr_el , self . sp_el , self . cp15 , self . v7m , self . exception , self . serror , self . vfp , self . iwmmxt , self . cpu_breakpoint , self . cpu_watchpoint , self . tlb_fi , self . end_reset_fields , self . pmsav7 , self . pmsav8 , self . sau , self . nvic , self . boot_info , self . gicv3state)
    }
}
pub type MemOpIdx = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AccelCPUClass {
    pub parent_class: ObjectClass,
    pub cpu_class_init: ::std::option::Option<unsafe extern "C" fn(cc: *mut CPUClass)>,
    pub cpu_instance_init: ::std::option::Option<unsafe extern "C" fn(cpu: *mut CPUState)>,
    pub cpu_realizefn: ::std::option::Option<
        unsafe extern "C" fn(cpu: *mut CPUState, errp: *mut *mut Error) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_AccelCPUClass() {
    const UNINIT: ::std::mem::MaybeUninit<AccelCPUClass> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<AccelCPUClass>(),
        120usize,
        concat!("Size of: ", stringify!(AccelCPUClass))
    );
    assert_eq!(
        ::std::mem::align_of::<AccelCPUClass>(),
        8usize,
        concat!("Alignment of ", stringify!(AccelCPUClass))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent_class) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AccelCPUClass),
            "::",
            stringify!(parent_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_class_init) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(AccelCPUClass),
            "::",
            stringify!(cpu_class_init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_instance_init) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(AccelCPUClass),
            "::",
            stringify!(cpu_instance_init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_realizefn) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(AccelCPUClass),
            "::",
            stringify!(cpu_realizefn)
        )
    );
}
impl Default for AccelCPUClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const qemu_plugin_mem_rw_QEMU_PLUGIN_MEM_R: qemu_plugin_mem_rw = qemu_plugin_mem_rw(1);
pub const qemu_plugin_mem_rw_QEMU_PLUGIN_MEM_W: qemu_plugin_mem_rw = qemu_plugin_mem_rw(2);
pub const qemu_plugin_mem_rw_QEMU_PLUGIN_MEM_RW: qemu_plugin_mem_rw = qemu_plugin_mem_rw(3);
impl ::std::ops::BitOr<qemu_plugin_mem_rw> for qemu_plugin_mem_rw {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        qemu_plugin_mem_rw(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for qemu_plugin_mem_rw {
    #[inline]
    fn bitor_assign(&mut self, rhs: qemu_plugin_mem_rw) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<qemu_plugin_mem_rw> for qemu_plugin_mem_rw {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        qemu_plugin_mem_rw(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for qemu_plugin_mem_rw {
    #[inline]
    fn bitand_assign(&mut self, rhs: qemu_plugin_mem_rw) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct qemu_plugin_mem_rw(pub ::std::os::raw::c_uint);
#[doc = " typedef qemu_plugin_meminfo_t - opaque memory transaction handle\n\n This can be further queried using the qemu_plugin_mem_* query\n functions."]
pub type qemu_plugin_meminfo_t = u32;
extern "C" {
    #[doc = " qemu_plugin_get_hwaddr() - return handle for memory operation\n @info: opaque memory info structure\n @vaddr: the virtual address of the memory operation\n\n For system emulation returns a qemu_plugin_hwaddr handle to query\n details about the actual physical address backing the virtual\n address. For linux-user guests it just returns NULL.\n\n This handle is *only* valid for the duration of the callback. Any\n information about the handle should be recovered before the\n callback returns."]
    pub fn qemu_plugin_get_hwaddr(
        info: qemu_plugin_meminfo_t,
        vaddr: u64,
    ) -> *mut qemu_plugin_hwaddr;
}
extern "C" {
    #[doc = " qemu_plugin_hwaddr_phys_addr() - query physical address for memory operation\n @haddr: address handle from qemu_plugin_get_hwaddr()\n\n Returns the physical address associated with the memory operation\n\n Note that the returned physical address may not be unique if you are dealing\n with multiple address spaces."]
    pub fn qemu_plugin_hwaddr_phys_addr(haddr: *const qemu_plugin_hwaddr) -> u64;
}
#[doc = " struct qemu_plugin_hwaddr - opaque hw address handle"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct qemu_plugin_hwaddr {
    pub is_io: bool,
    pub is_store: bool,
    pub v: qemu_plugin_hwaddr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union qemu_plugin_hwaddr__bindgen_ty_1 {
    pub io: qemu_plugin_hwaddr__bindgen_ty_1__bindgen_ty_1,
    pub ram: qemu_plugin_hwaddr__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qemu_plugin_hwaddr__bindgen_ty_1__bindgen_ty_1 {
    pub section: *mut MemoryRegionSection,
    pub offset: hwaddr,
}
#[test]
fn bindgen_test_layout_qemu_plugin_hwaddr__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<qemu_plugin_hwaddr__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<qemu_plugin_hwaddr__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(qemu_plugin_hwaddr__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<qemu_plugin_hwaddr__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(qemu_plugin_hwaddr__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).section) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(qemu_plugin_hwaddr__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(section)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(qemu_plugin_hwaddr__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(offset)
        )
    );
}
impl Default for qemu_plugin_hwaddr__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qemu_plugin_hwaddr__bindgen_ty_1__bindgen_ty_2 {
    pub hostaddr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_qemu_plugin_hwaddr__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<qemu_plugin_hwaddr__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<qemu_plugin_hwaddr__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(qemu_plugin_hwaddr__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<qemu_plugin_hwaddr__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(qemu_plugin_hwaddr__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hostaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(qemu_plugin_hwaddr__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(hostaddr)
        )
    );
}
impl Default for qemu_plugin_hwaddr__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_qemu_plugin_hwaddr__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<qemu_plugin_hwaddr__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<qemu_plugin_hwaddr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(qemu_plugin_hwaddr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<qemu_plugin_hwaddr__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(qemu_plugin_hwaddr__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(qemu_plugin_hwaddr__bindgen_ty_1),
            "::",
            stringify!(io)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ram) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(qemu_plugin_hwaddr__bindgen_ty_1),
            "::",
            stringify!(ram)
        )
    );
}
impl Default for qemu_plugin_hwaddr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for qemu_plugin_hwaddr__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "qemu_plugin_hwaddr__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_qemu_plugin_hwaddr() {
    const UNINIT: ::std::mem::MaybeUninit<qemu_plugin_hwaddr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<qemu_plugin_hwaddr>(),
        24usize,
        concat!("Size of: ", stringify!(qemu_plugin_hwaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<qemu_plugin_hwaddr>(),
        8usize,
        concat!("Alignment of ", stringify!(qemu_plugin_hwaddr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_io) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(qemu_plugin_hwaddr),
            "::",
            stringify!(is_io)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_store) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(qemu_plugin_hwaddr),
            "::",
            stringify!(is_store)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(qemu_plugin_hwaddr),
            "::",
            stringify!(v)
        )
    );
}
impl Default for qemu_plugin_hwaddr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for qemu_plugin_hwaddr {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "qemu_plugin_hwaddr {{ is_io: {:?}, is_store: {:?}, v: {:?} }}",
            self.is_io, self.is_store, self.v
        )
    }
}
extern "C" {
    #[doc = " tlb_plugin_lookup: query last TLB lookup\n @cpu: cpu environment\n\n This function can be used directly after a memory operation to\n query information about the access. It is used by the plugin\n infrastructure to expose more information about the address.\n\n It would only fail if not called from an instrumented memory access\n which would be an abuse of the API."]
    pub fn tlb_plugin_lookup(
        cpu: *mut CPUState,
        addr: target_ulong,
        mmu_idx: ::std::os::raw::c_int,
        is_store: bool,
        data: *mut qemu_plugin_hwaddr,
    ) -> bool;
}
pub type __int128_t = i128;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GDBRegisterState {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct kvm_dirty_gfn {
    pub _address: u8,
}
